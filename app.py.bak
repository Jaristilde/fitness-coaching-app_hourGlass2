# streamlit_app.py
# Hourglass Workout Program by Joane Aristilde ‚Äî PDF-accurate Streamlit app
# Adds: per-exercise video uploads (size-limited), Booty A/B (L2) variation,
# 1-week meal plan selector (Omni / Pescatarian / Vegan), Daily Intake Guide,
# Vegan "grow your glutes" notes incl. creatine & hydration guidance,
# upgraded progress tracker (weight, water, energy balance).
# Facts include short citations with URLs (see Education section).

import streamlit as st
import pandas as pd
import os, json, shutil, re
from datetime import datetime, date
from PIL import Image

# -----------------------------
# Page & constants
# -----------------------------
st.set_page_config(page_title="Hourglass Fitness Program by Joane Aristilde",
                   page_icon="üèãÔ∏è‚Äç‚ôÄÔ∏è", layout="wide")

MAX_VIDEO_MB = 50  # limit per video upload
UPLOAD_ROOT = "uploaded_content"
MAIN_MEDIA_DIR = os.path.join(UPLOAD_ROOT, "main_media")
EXERCISE_VIDEOS_DIR = os.path.join(UPLOAD_ROOT, "exercise_videos")
PROGRESS_DIR = os.path.join(UPLOAD_ROOT, "progress_photos")
USER_DATA_DIR = "user_data"

# -----------------------------
# Styles
# -----------------------------
st.markdown("""
<style>
    .main { background: linear-gradient(135deg, #ffeef8 0%, #fff5f8 50%, #f0f8ff 100%); }
    .main-header {
        font-size: 3rem; font-weight: 800; text-align: center;
        background: linear-gradient(45deg, #FF1493, #FF69B4, #DA70D6);
        -webkit-background-clip: text; -webkit-text-fill-color: transparent;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1); margin-bottom: .5rem;
    }
    .sub-header { font-size: 1.1rem; text-align: center; color: #666; margin-bottom: 1rem; font-weight: 300; }
    .hero-section {
        text-align: center; padding: 1.2rem .8rem;
        background: linear-gradient(135deg, rgba(255,20,147,.15), rgba(255,105,180,.15), rgba(218,112,214,.15));
        border-radius: 18px; margin-bottom: 10px; backdrop-filter: blur(10px);
        box-shadow: 0 8px 32px rgba(0,0,0,.08); border: 1px solid rgba(255,255,255,.35);
    }
    .weekly-box { background: rgba(255,255,255,.96); padding: 12px; border-radius: 14px;
        margin: 8px 0 14px 0; box-shadow: 0 4px 15px rgba(0,0,0,.08); border-left: 5px solid #FF1493; }
    .category-header { background: linear-gradient(45deg,#FF69B4,#DA70D6); color:#fff;
        padding: 10px; border-radius: 10px; text-align:center; font-weight:700; margin: 12px 0 8px 0; }
    .exercise-card { background: rgba(255,255,255,.98); padding: 12px; border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0,0,0,.08); margin: 8px 0; border-left: 5px solid #FF1493; }
    .completed-card { background: rgba(232,245,232,.95); border-left: 5px solid #4CAF50; }
    .video-section { background: rgba(240,248,255,.95); padding: 8px; border-radius: 8px; border: 2px solid #4169E1; }
    .workout-summary { background: rgba(255,248,220,.95); padding: 12px; border-radius: 12px; border-left: 5px solid #FFD700; margin: 12px 0; }
    .meal-item { background: rgba(240,248,255,.95); padding: 10px; border-radius: 10px; margin: 8px 0; border-left: 4px solid #4169E1; }
    .progress-card { background: rgba(255,240,245,.95); padding: 12px; border-radius: 12px; border-left: 5px solid #FF69B4; margin: 8px 0; }
    .badge { display:inline-block;padding:6px 10px;border-radius:12px;color:#fff;font-weight:700;margin:6px 0; }
    .info-section {
        background: rgba(255,255,255,.96); padding: 16px; border-radius: 14px;
        margin: 12px 0; box-shadow: 0 4px 15px rgba(0,0,0,.08); 
        border-left: 5px solid #20B2AA;
    }
    .home-button {
        background: linear-gradient(45deg, #FF1493, #FF69B4);
        color: white; padding: 8px 16px; border-radius: 20px;
        border: none; font-weight: bold; margin: 4px;
    }
</style>
""", unsafe_allow_html=True)


# -----------------------------
# Utilities
# -----------------------------
def ensure_dirs():
    for d in [UPLOAD_ROOT, MAIN_MEDIA_DIR, EXERCISE_VIDEOS_DIR, PROGRESS_DIR, USER_DATA_DIR]:
        os.makedirs(d, exist_ok=True)


def _timestamp_name(prefix, original_name):
    ext = original_name.split(".")[-1].lower()
    ts = datetime.now().strftime("%Y%m%d_%H%M%S")
    return f"{prefix}_{ts}.{ext}"


def _latest(directory, prefix):
    if not os.path.exists(directory): return None
    matches = [os.path.join(directory, f) for f in os.listdir(directory) if f.startswith(prefix)]
    return max(matches, key=os.path.getmtime) if matches else None


def parse_set_count(sets_string):
    """
    Count checkable sets:
    - Include AMRAP sets in the count
    - Exclude warm-up sets
    - If '1 set each' => 1 (finishers have sub-moves tracked separately)
    - '‚Äî' => 0
    """
    if not sets_string or sets_string.strip() == "‚Äî":
        return 0
    s = sets_string.lower()
    cleaned = re.sub(r'\d+\s*warm[- ]*up.*?(?:\+|$)', '', s)
    nums = re.findall(r'\d+', cleaned)
    if not nums:
        return 1 if "set each" in s else 0
    return sum(int(n) for n in nums)


def save_progress_photo(uploaded_file, photo_type):
    ensure_dirs()
    filename = _timestamp_name(f"progress_{photo_type}", uploaded_file.name)
    path = os.path.join(PROGRESS_DIR, filename)
    with open(path, "wb") as f: f.write(uploaded_file.getbuffer())
    return path


def save_exercise_video(uploaded_file, key_slug):
    """Save per-exercise demo video with size cap."""
    ensure_dirs()
    size_mb = len(uploaded_file.getbuffer()) / (1024 * 1024)
    if size_mb > MAX_VIDEO_MB:
        st.error(f"Video too large: {size_mb:.1f} MB (limit {MAX_VIDEO_MB} MB). Please upload a smaller file.")
        return None
    safe_key = re.sub(r'[^a-z0-9_]+', '_', key_slug.lower())
    filename = _timestamp_name(f"exercise_{safe_key}", uploaded_file.name)
    path = os.path.join(EXERCISE_VIDEOS_DIR, filename)
    with open(path, "wb") as f: f.write(uploaded_file.getbuffer())
    return path


def find_exercise_video(key_slug):
    ensure_dirs()
    safe_key = re.sub(r'[^a-z0-9_]+', '_', key_slug.lower())
    candidates = [os.path.join(EXERCISE_VIDEOS_DIR, f) for f in os.listdir(EXERCISE_VIDEOS_DIR) if
                  safe_key in f.lower()]
    return max(candidates, key=os.path.getmtime) if candidates else None


def save_user_data():
    ensure_dirs()
    data = {
        'completed_exercises': st.session_state.get('completed_exercises', []),
        'selected_level': st.session_state.get('selected_level', 1),
        'progress_entries': st.session_state.get('progress_entries', []),
        'selected_workout': st.session_state.get('selected_workout', None),
        'selected_workout_day': st.session_state.get('selected_workout_day', None),
        'current_page': st.session_state.get('current_page', 'Home'),
        'last_updated': datetime.now().isoformat()
    }
    with open(os.path.join(USER_DATA_DIR, 'user_progress.json'), 'w') as f:
        json.dump(data, f, indent=2)


def load_user_data():
    try:
        with open(os.path.join(USER_DATA_DIR, 'user_progress.json'), 'r') as f:
            data = json.load(f)
        for k, v in data.items():
            if k != 'last_updated': st.session_state[k] = v
        return True
    except FileNotFoundError:
        return False


def workout_badge(label):
    colors = {
        "BOOTY": "#FF69B4", "BOOTY A": "#FF69B4", "BOOTY B": "#FF69B4",
        "LEGS & BOOTY": "#8A2BE2", "ABS/CORE & CARDIO": "#1E90FF",
        "ABS/CORE ONLY (you can do at home)": "#1E90FF",
        "LIGHT SHOULDERS & BACK": "#20B2AA", "SHOULDERS & ABS/CORE": "#20B2AA",
        "REST": "#28a745"
    }
    color = colors.get(label, "#555")
    st.markdown(f"<div class='badge' style='background:{color};'>{label}</div>", unsafe_allow_html=True)


# -----------------------------
# PDF-accurate program (names, sets, reps, stairmaster)
# -----------------------------
PROGRAM_SPLIT = {
    "Level 1": {
        "Monday": "BOOTY",
        "Tuesday": "ABS/CORE & CARDIO",
        "Wednesday": "REST",
        "Thursday": "LEGS & BOOTY",
        "Friday": "ABS/CORE ONLY (you can do at home)",
        "Saturday": "LIGHT SHOULDERS & BACK",
        "Sunday": "REST"
    },
    "Level 2": {
        "Monday": "BOOTY A",  # L2 has two distinct booty days
        "Tuesday": "LIGHT SHOULDERS & BACK",
        "Wednesday": "ABS/CORE & CARDIO",
        "Thursday": "BOOTY B",
        "Friday": "SHOULDERS & ABS/CORE",
        "Saturday": "LEGS & BOOTY",
        "Sunday": "REST"
    }
}


def warmup_item(): return {"name": "Booty/ Leg Activation", "sets": "‚Äî", "reps": "5 min", "category": "Warm-up"}


def stretching_item(): return {"name": "Stretching", "sets": "‚Äî", "reps": "5 min", "category": "Recovery"}


# Updated stairmaster workouts (replacing treadmill)
def stairmaster_L1(): return {"name": "Stairmaster Workout", "sets": "‚Äî", "reps": "30 min: fat loss levels 8-10",
                              "category": "Cardio"}


def stairmaster_L2(): return {"name": "Stairmaster Workout", "sets": "‚Äî", "reps": "30 min: fat loss levels 8-10",
                              "category": "Cardio"}


def stairmaster_booty_warmup(): return {"name": "Stairmaster Warm-up", "sets": "‚Äî",
                                        "reps": "20 min: levels 5-6 (booty day warm-up)", "category": "Warm-up"}


KICKBACKS = {"name": "Kickbacks", "sets": "1 warm up set + 3 (each side)", "reps": "10-12 reps; 12-15 reps (last set)",
             "category": "Booty"}
HIP_THRUST = {"name": "Hip Thrust", "sets": "1 warm up set + 3 + 1 AMRAP",
              "reps": "10-12 reps; 8 reps (last set); AMRAP ~20% avg weight", "category": "Booty"}
HYPEREXT = {"name": "Hyperextensions", "sets": "(1 warm up set) + 3 + 1 AMRAP (no weight)",
            "reps": "10-12 reps; 10s hold on last rep each set", "category": "Booty"}
RDLS = {"name": "RDLs (Romanian Deadlifts)", "sets": "1 warm up set + 3", "reps": "10-12 reps; 8 reps (last set)",
        "category": "Booty"}
ABDUCTORS = {"name": "Abductors", "sets": "(1 warm up set) + 3", "reps": "10-12 reps; 12-15 reps (last set)",
             "category": "Booty"}
BULGARIAN = {"name": "Bulgarian Split Squats", "sets": "1 warm up set + 3 (each side) + 1 AMRAP (no weight)",
             "reps": "10-12 reps; 8 reps (last set)", "category": "Legs"}
LEG_CURL = {"name": "Leg Curl", "sets": "(1 warm up set) + 3", "reps": "10-12 reps; 12-15 reps (last set)",
            "category": "Legs"}
LEG_PRESS = {"name": "Leg Press", "sets": "1 warm up set + 3", "reps": "10-12 reps; 8-10 reps (last set)",
             "category": "Legs"}

LEG_FINISHER = {
    "name": "Leg Finisher (light weight)", "sets": "1 set each",
    "reps": "Single Leg Hip Thrust 15-20 reps, Sumo Squats 15-20 reps, Squat Jumps 10-12 reps", "category": "Booty",
    "submoves": [
        {"name": "Single Leg Hip Thrust", "sets": "1", "reps": "15-20 reps"},
        {"name": "Sumo Squats", "sets": "1", "reps": "15-20 reps"},
        {"name": "Squat Jumps", "sets": "1", "reps": "10-12 reps"}
    ]
}
BOOTY_FINISHER_B = {
    "name": "Leg Finisher (light weight) ‚Äî Focus Sumo + Jumps", "sets": "1 set each",
    "reps": "Sumo Squats 15-20 reps, Squat Jumps 10-12 reps, Single Leg Hip Thrust 15-20 reps",
    "category": "Booty", "submoves": [
        {"name": "Sumo Squats", "sets": "1", "reps": "15-20 reps"},
        {"name": "Squat Jumps", "sets": "1", "reps": "10-12 reps"},
        {"name": "Single Leg Hip Thrust", "sets": "1", "reps": "15-20 reps"}
    ]
}

# Updated day templates with stairmaster and booty warmups
BOOTY_L1 = [stairmaster_booty_warmup(), warmup_item(), KICKBACKS, HIP_THRUST, HYPEREXT, RDLS, stairmaster_L1(),
            stretching_item()]
BOOTY_L2_CORE = [stairmaster_booty_warmup(), warmup_item(), KICKBACKS, HIP_THRUST, HYPEREXT, RDLS, ABDUCTORS]
BOOTY_L2_A = BOOTY_L2_CORE + [LEG_FINISHER, stretching_item()]
BOOTY_L2_B = BOOTY_L2_CORE + [BOOTY_FINISHER_B, stretching_item()]
LEGS_BOOTY_L1 = [warmup_item(), HIP_THRUST, HYPEREXT, BULGARIAN, LEG_CURL, stairmaster_L1(), stretching_item()]
LEGS_BOOTY_L2 = [warmup_item(), HIP_THRUST, HYPEREXT, BULGARIAN, LEG_PRESS, LEG_CURL, stairmaster_L2(),
                 stretching_item()]

# Light Shoulders & Back
LSB_L1 = [
    {"name": "Warm Up Mobility", "sets": "‚Äî", "reps": "5 min", "category": "Warm-up"},
    {"name": "Lat Pulldown Wide Grip", "sets": "1 warm up set + 3", "reps": "10-12 reps; 8-10 reps (last set)",
     "category": "Back"},
    {"name": "Close Grip Rows", "sets": "3", "reps": "8-10 reps", "category": "Back"},
    {"name": "Db Lateral Raises", "sets": "1 warm up set + 3", "reps": "10-12 reps", "category": "Shoulders"},
    {"name": "Db Shoulder Press", "sets": "1 warm up set + 3", "reps": "10-12 reps", "category": "Shoulders"},
    {"name": "Face Pulls", "sets": "3", "reps": "12-15 reps", "category": "Shoulders"}
]
LSB_L2 = [
    {"name": "Warm Up Mobility", "sets": "‚Äî", "reps": "5 min", "category": "Warm-up"},
    {"name": "Lat Pulldown Wide Grip", "sets": "1 warm up set + 3", "reps": "10-12 reps; 8-10 reps (last set)",
     "category": "Back"},
    {"name": "Lat Pulldown Close Grip", "sets": "3", "reps": "8-10 reps", "category": "Back"},
    {"name": "Wide Grip Rows", "sets": "3", "reps": "8-10 reps", "category": "Back"},
    {"name": "Close Grip Rows", "sets": "3", "reps": "8-10 reps", "category": "Back"},
    {"name": "Db Single Arm Rows", "sets": "3 (each side)", "reps": "10-12 reps", "category": "Back"},
    {"name": "Face Pulls", "sets": "3", "reps": "12-15 reps", "category": "Shoulders"}
]

# Shoulders & Abs/Core (single list per PDF)
SH_ABS = [
    {"name": "Warm Up Mobility", "sets": "‚Äî", "reps": "5 min", "category": "Warm-up"},
    {"name": "Db Lateral Raises", "sets": "3", "reps": "10-12 reps", "category": "Shoulders"},
    {"name": "Db Bent Over Lateral Raises", "sets": "3", "reps": "10-12 reps", "category": "Shoulders"},
    {"name": "Db Shoulder Press", "sets": "1 warm up set + 3", "reps": "10-12 reps", "category": "Shoulders"},
    {"name": "Db Front Raises", "sets": "3", "reps": "10-12 reps", "category": "Shoulders"},
    {"name": "Gorilla Rows", "sets": "3", "reps": "10-12 reps", "category": "Back"},
    {"name": "Face Pulls", "sets": "3", "reps": "12-15 reps", "category": "Shoulders"},
    # Abs/Core circuit (repeat 2x)
    {"name": "Plank", "sets": "1", "reps": "1 min", "category": "Core"},
    {"name": "Reverse Plank", "sets": "1", "reps": "1 min", "category": "Core"},
    {"name": "Reverse Plank Knee Tucks", "sets": "1", "reps": "30 sec", "category": "Core"},
    {"name": "Reverse Plank Dips", "sets": "1", "reps": "30 sec", "category": "Core"},
    {"name": "Leg Bridge Knee Tucks", "sets": "1", "reps": "30 sec", "category": "Core"},
    {"name": "Frog Crunches", "sets": "1", "reps": "30 sec", "category": "Core"},
    {"name": "Butterfly Kicks", "sets": "1", "reps": "30 sec", "category": "Core"},
    {"name": "Half Leg Raises", "sets": "1", "reps": "30 sec", "category": "Core"},
    {"name": "Dead Bugs", "sets": "1", "reps": "30 sec", "category": "Core"},
    {"name": "Superman hold", "sets": "1", "reps": "30 sec", "category": "Core"},
    {"name": "Repeat abs & core 2x", "sets": "‚Äî", "reps": "Complete the circuit twice", "category": "Core"},
]

ABS_CORE_CIRCUIT = [
    {"name": "Plank", "sets": "1", "reps": "1 min", "category": "Core"},
    {"name": "High Plank", "sets": "1", "reps": "1 min", "category": "Core"},
    {"name": "High Plank Leg Lifts", "sets": "1", "reps": "30 sec", "category": "Core"},
    {"name": "Plank Knee Taps", "sets": "1", "reps": "30 sec", "category": "Core"},
    {"name": "Superman Hold", "sets": "1", "reps": "30 sec", "category": "Core"},
    {"name": "Reverse Plank", "sets": "1", "reps": "1 min", "category": "Core"},
    {"name": "Reverse Plank Knee Tucks", "sets": "1", "reps": "30 sec", "category": "Core"},
    {"name": "Reverse Plank Dips", "sets": "1", "reps": "30 sec", "category": "Core"},
    {"name": "Glute Bridge Marches", "sets": "1", "reps": "30 sec", "category": "Core"},
    {"name": "Single Leg Bridge Hold", "sets": "1", "reps": "30 sec (each side)", "category": "Core"},
    {"name": "Leg Bridge Knee Tucks", "sets": "1", "reps": "30 sec", "category": "Core"},
    {"name": "Around The Worlds", "sets": "1", "reps": "30 sec (each side)", "category": "Core"},
    {"name": "Repeat abs & core 2x", "sets": "‚Äî", "reps": "Complete the circuit twice", "category": "Core"},
]
ABS_CORE_ONLY = [
    {"name": "Plank", "sets": "1", "reps": "1 min", "category": "Core"},
    {"name": "Plank Knee Taps", "sets": "1", "reps": "30 sec", "category": "Core"},
    {"name": "Reverse Plank", "sets": "1", "reps": "1 min", "category": "Core"},
    {"name": "Reverse Plank Knee Tucks", "sets": "1", "reps": "30 sec", "category": "Core"},
    {"name": "Reverse Plank Dips", "sets": "1", "reps": "30 sec", "category": "Core"},
    {"name": "Glute Bridge Marches", "sets": "1", "reps": "30 sec", "category": "Core"},
    {"name": "Single Leg Bridge Hold", "sets": "1", "reps": "30 sec (each side)", "category": "Core"},
    {"name": "Leg Bridge Knee Tucks", "sets": "1", "reps": "30 sec", "category": "Core"},
    {"name": "Butterfly Kicks", "sets": "1", "reps": "30 sec", "category": "Core"},
    {"name": "Half Leg Raises", "sets": "1", "reps": "30 sec", "category": "Core"},
    {"name": "Dead Bugs", "sets": "1", "reps": "30 sec", "category": "Core"},
    {"name": "Frog Crunches", "sets": "1", "reps": "30 sec", "category": "Core"},
    {"name": "Around The Worlds", "sets": "1", "reps": "30 sec (each side)", "category": "Core"},
    {"name": "Repeat 2x total", "sets": "‚Äî", "reps": "Complete entire circuit twice", "category": "Core"},
]

# -----------------------------
# Session init
# -----------------------------
if 'initialized' not in st.session_state:
    st.session_state.initialized = True
    ensure_dirs()
    load_user_data()

defaults = {
    'completed_exercises': [], 'selected_level': 1, 'progress_entries': [],
    'selected_workout': None, 'selected_workout_day': None, 'current_page': 'Home'
}
for k, v in defaults.items():
    if k not in st.session_state: st.session_state[k] = v


# -----------------------------
# Home button
# -----------------------------
def render_home_button():
    if st.button("üè† Home", key="home_btn", help="Return to main page"):
        st.session_state.current_page = 'Home'
        st.session_state.selected_workout = None
        st.session_state.selected_workout_day = None
        save_user_data()
        st.rerun()


# -----------------------------
# Hero (always visible at top)
# -----------------------------
def render_hero():
    ensure_dirs()
    st.markdown("""
    <div class="hero-section">
        <h1 class="main-header">HOURGLASS FITNESS TRANSFORMATION</h1>
        <p class="sub-header">12-Week plan for Booty, Core, Back & Shoulders ‚Äî by Joane Aristilde</p>
    </div>
    """, unsafe_allow_html=True)
    mode = st.radio("Choose your display:", ["Cover Photo", "Intro Video"], horizontal=True)
    c1, c2 = st.columns([3, 2])
    if mode == "Cover Photo":
        with c1:
            cover = _latest(MAIN_MEDIA_DIR, "cover_")
            st.image(cover, use_container_width=True, caption="Your Transformation Journey") if cover else st.info(
                "Upload a cover photo on the right.")
        with c2:
            up = st.file_uploader("Upload your transformation photo", type=["png", "jpg", "jpeg"], key="cover_up")
            if up:
                dst = os.path.join(MAIN_MEDIA_DIR, _timestamp_name("cover", up.name))
                with open(dst, "wb") as f: f.write(up.getbuffer())
                st.success("Cover photo saved!");
                st.image(dst, use_container_width=True)
            existing = _latest(MAIN_MEDIA_DIR, "cover_")
            if existing and st.button("Delete current cover photo"):
                os.remove(existing);
                st.success("Photo deleted!");
                st.rerun()
    else:
        with c1:
            vid = _latest(MAIN_MEDIA_DIR, "intro_")
            st.video(vid);
            st.caption("Your intro video") if vid else st.info("Upload an intro video on the right.")
        with c2:
            upv = st.file_uploader("Upload your intro video", type=["mp4", "mov", "avi", "webm"], key="intro_up")
            if upv:
                dst = os.path.join(MAIN_MEDIA_DIR, _timestamp_name("intro", upv.name))
                with open(dst, "wb") as f: f.write(upv.getbuffer())
                st.success("Intro video saved!");
                st.video(dst)
            existing = _latest(MAIN_MEDIA_DIR, "intro_")
            if existing and st.button("Delete intro video"):
                os.remove(existing);
                st.success("Video deleted!");
                st.rerun()


# -----------------------------
# New content pages
# -----------------------------
def render_home_page():
    st.markdown("""
    <div class="info-section">
        <h2>Welcome to Your Hourglass Fitness Transformation</h2>
        <p>Transform your body with this comprehensive 12-week program designed specifically for building your booty, strengthening your core, and sculpting your back and shoulders.</p>

        <h3>Getting Started:</h3>
        <ol>
            <li><strong>Read the Workout Overview:</strong> Understand the program structure</li>
            <li><strong>Learn Progressive Overload:</strong> Master the key principle for muscle building</li>
            <li><strong>Choose Your Level:</strong> Start with Level 1 if you're new to this program</li>
            <li><strong>Begin Your Program:</strong> Follow your daily workouts</li>
            <li><strong>Track Your Progress:</strong> Use the weight tracker to monitor changes</li>
        </ol>

        <div style="background: rgba(255,20,147,0.1); padding: 16px; border-radius: 12px; margin: 20px 0;">
            <h4 style="color: #FF1493; margin-top: 0;">Ready to Start?</h4>
            <p>Navigate through the tabs below to explore different sections. Remember: consistency and proper form are key to your success!</p>
        </div>
    </div>
    """, unsafe_allow_html=True)


def render_progressive_overload():
    st.markdown("""
    <div class="info-section">
        <h2>Progressive Overload</h2>
        <p>All exercises with weights should be performed according to the principle of "Progressive Overload." This means that you consistently increase your performance. If 12 repetitions feel easy, you raise the weight so that you can only manage 8 repetitions. Over time, you then aim to increase the number of repetitions back to 12. This is how you build muscle.</p>

        <p>The number of reps listed below may therefore vary as you apply progressive overload.</p>

        <h3>How It Works:</h3>
        <ul>
            <li><strong>Start with proper form:</strong> Master the movement pattern before adding weight</li>
            <li><strong>Increase difficulty gradually:</strong> When 12 reps feel easy, increase weight so you can only do 8 reps with good form</li>
            <li><strong>Build back up:</strong> Work to increase reps back to 12 with the new weight</li>
            <li><strong>Track your progress:</strong> Keep records of weights, sets, and reps</li>
        </ul>

        <h3>Safety Guidelines:</h3>
        <ul>
            <li>Never sacrifice form for heavier weight</li>
            <li>Increase weight by small increments (2.5-5 lbs typically)</li>
            <li>Allow adequate rest between sets and training days</li>
            <li>Listen to your body and adjust as needed</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)


def render_workout_overview():
    st.markdown("""
    <div class="info-section">
        <h2>Workout Overview</h2>
        <p>The training plan is structured as follows:</p>

        <p>The categories "Booty", "Legs & Booty" and "Light Shoulders & Back" are divided into Level 1 and Level 2. It's advisable to start with Level 1. If you're slightly more advanced and ready for a challenge, you can begin with Level 2. Beginners should stick with Level 1 until they feel confident with the exercises. Don't forget that the entire split changes when you progress to Level 2.</p>

        <p>The "Abs/Core Only" category is specifically designed for beginners and can be done at home. If you're motivated on a rest day, you can incorporate "Abs/Core Only" into your weekly plan (This also applies to the advanced). However, be cautious not to overexert yourself. The body requires sufficient rest and time for recovery and muscle building.</p>

        <p>The plan for advanced (Level 2) is also my current personal workout plan! However, my training plan changes every 12 weeks. The order of exercises is strategically arranged for an optimal training experience and should be adhered to as closely as possible.</p>
    </div>
    """, unsafe_allow_html=True)

    # -----------------------------
    # Program logic
    # -----------------------------
    def current_day_name():
        return date.today().strftime("%A")

    def get_schedule(level):
        return PROGRAM_SPLIT[f"Level {level}"]

    def get_exercises_for_day(level, day_name, picked_label=None):
        schedule = get_schedule(level)
        label = schedule.get(day_name, "REST") if picked_label is None else picked_label
        if label == "REST":
            return [{"name": "Rest Day", "sets": "‚Äî", "reps": "Active recovery, stretching, or light walk",
                     "category": "Recovery"}]
        if label.startswith("ABS/CORE ONLY"): return ABS_CORE_ONLY
        if label == "ABS/CORE & CARDIO":
            arr = ABS_CORE_CIRCUIT.copy();
            arr.append(stairmaster_L1() if level == 1 else stairmaster_L2());
            return arr
        if label == "SHOULDERS & ABS/CORE": return SH_ABS
        if label == "LIGHT SHOULDERS & BACK": return LSB_L1 if level == 1 else LSB_L2
        if label == "LEGS & BOOTY": return LEGS_BOOTY_L1 if level == 1 else LEGS_BOOTY_L2
        if label in ("BOOTY", "BOOTY A", "BOOTY B"):
            return BOOTY_L1 if level == 1 else (BOOTY_L2_A if label == "BOOTY A" else BOOTY_L2_B)
        return [{"name": label, "sets": "‚Äî", "reps": "", "category": "General"}]

    def weekly_schedule(level):
        st.markdown(
            '<div class="weekly-box"><h4 style="text-align:center;color:#FF1493;margin:0;">YOUR WEEKLY WORKOUT PLAN</h4></div>',
            unsafe_allow_html=True)
        schedule = get_schedule(level);
        today = current_day_name()
        for day, label in schedule.items():
            cols = st.columns([2, 4, 2])
            with cols[0]:
                st.markdown(f"**{day}**")
            with cols[1]:
                if label == "REST":
                    st.markdown(f"<i style='color:#28a745;'>REST</i>", unsafe_allow_html=True)
                else:
                    if st.button(label, key=f"wkbtn_{level}_{day}", use_container_width=True):
                        st.session_state.selected_workout = label
                        st.session_state.selected_workout_day = day
                        st.rerun()
            with cols[2]:
                st.markdown("üëà TODAY" if day == today else "")

    def exercise_key(workout_label, exercise_name, workout_date):
        return f"ex_{workout_date}_{workout_label}_{exercise_name}".replace(" ", "_").replace("/", "_")

    def submove_key(parent_key, subname, idx):
        return f"{parent_key}_finisher_{idx}_{re.sub(r'[^a-z0-9_]+', '_', subname.lower())}"

    def render_exercise_card(exercise, idx, workout_label, workout_date):
        name = exercise.get("name", "");
        sets = exercise.get("sets", "‚Äî");
        reps = exercise.get("reps", "‚Äî")
        category = exercise.get("category", "General");
        ex_key = exercise_key(workout_label, name, workout_date)
        total_sets = parse_set_count(sets);
        is_finisher_group = isinstance(exercise.get("submoves"), list)

        # count done
        completed = 0
        if is_finisher_group:
            for i, sub in enumerate(exercise["submoves"], start=1):
                if submove_key(ex_key, sub["name"], i) in st.session_state.completed_exercises: completed += 1
            total = len(exercise["submoves"]);
            fully_done = (completed == total and total > 0)
        else:
            for s in range(1, total_sets + 1):
                if f"{ex_key}_set_{s}" in st.session_state.completed_exercises: completed += 1
            total = total_sets;
            fully_done = (completed == total and total > 0)

        card_class = "exercise-card completed-card" if fully_done else "exercise-card"
        st.markdown(f"""
        <div class="{card_class}">
          <h4 style="margin:0 0 6px 0;">{idx}. {name}</h4>
          <div><b>Category:</b> {category}</div>
          <div><b>Sets:</b> {sets} &nbsp; | &nbsp; <b>Reps:</b> {reps}</div>
        </div>
        """, unsafe_allow_html=True)

        c1, c2 = st.columns([3, 2])
        with c1:
            if is_finisher_group:
                st.markdown("**Finisher Tracking (each sub-move tracked separately):**")
                for i, sub in enumerate(exercise["submoves"], start=1):
                    smk = submove_key(ex_key, sub["name"], i)
                    done = smk in st.session_state.completed_exercises
                    chk = st.checkbox(f"{sub['name']} ‚Äî {sub.get('reps', '')}", key=f"chk_{smk}", value=done)
                    if chk and not done: st.session_state.completed_exercises.append(smk); save_user_data()
                    if not chk and done: st.session_state.completed_exercises.remove(smk); save_user_data()
                st.info(f"Completed: {completed}/{total} finisher items")
            else:
                st.markdown("**Track Your Sets:**")
                parts = [p.strip() for p in sets.split('+')];
                counter = 1
                warm_noted = False
                for p in parts:
                    low = p.lower()
                    if 'warm' in low:
                        if not warm_noted: st.caption("Warm-up sets (not tracked)."); warm_noted = True
                        continue
                    if 'amrap' in low:
                        sk = f"{ex_key}_set_{counter}"
                        chk = st.checkbox("AMRAP Set", key=f"chk_{sk}",
                                          value=(sk in st.session_state.completed_exercises))
                        if chk and sk not in st.session_state.completed_exercises: st.session_state.completed_exercises.append(
                            sk); save_user_data()
                        if not chk and sk in st.session_state.completed_exercises: st.session_state.completed_exercises.remove(
                            sk); save_user_data()
                        counter += 1
                        continue
                    nums = re.findall(r'\d+', p)
                    if nums:
                        for w in range(1, int(nums[0]) + 1):
                            sk = f"{ex_key}_set_{counter}"
                            chk = st.checkbox(f"Working Set {w}", key=f"chk_{sk}",
                                              value=(sk in st.session_state.completed_exercises))
                            if chk and sk not in st.session_state.completed_exercises: st.session_state.completed_exercises.append(
                                sk); save_user_data()
                            if not chk and sk in st.session_state.completed_exercises: st.session_state.completed_exercises.remove(
                                sk); save_user_data()
                            counter += 1
                if total > 0:
                    st.info(f"Completed: {completed}/{total} sets")
                else:
                    simp_key = f"{ex_key}_simple"
                    chk = st.checkbox("Mark done", key=f"chk_{simp_key}",
                                      value=(simp_key in st.session_state.completed_exercises))
                    if chk and simp_key not in st.session_state.completed_exercises: st.session_state.completed_exercises.append(
                        simp_key); save_user_data()
                    if not chk and simp_key in st.session_state.completed_exercises: st.session_state.completed_exercises.remove(
                        simp_key); save_user_data()

        with c2:
            st.markdown('<div class="video-section"><b>üìπ Demo Video (optional)</b></div>', unsafe_allow_html=True)
            existing = find_exercise_video(ex_key)
            if existing and os.path.exists(existing):
                st.video(existing)
                if st.button(f"Delete video for {name}", key=f"delvid_{ex_key}"):
                    try:
                        os.remove(existing); st.success("Video deleted."); st.rerun()
                    except Exception as e:
                        st.error(f"Could not delete: {e}")
            upv = st.file_uploader(f"Upload video for: {name}", type=["mp4", "mov", "avi", "webm"], key=f"up_{ex_key}")
            if upv:
                path = save_exercise_video(upv, ex_key)
                if path: st.success("Video saved!"); st.video(path)

    def render_workout():
        cols = st.columns(3)
        with cols[0]:
            if st.button("Level 1", use_container_width=True):
                st.session_state.selected_level = 1;
                st.session_state.selected_workout = None;
                st.session_state.selected_workout_day = None;
                save_user_data();
                st.rerun()
        with cols[1]:
            if st.button("Level 2", use_container_width=True):
                st.session_state.selected_level = 2;
                st.session_state.selected_workout = None;
                st.session_state.selected_workout_day = None;
                save_user_data();
                st.rerun()
        with cols[2]:
            st.info(f"**Current: Level {st.session_state.selected_level}**")

        weekly_schedule(st.session_state.selected_level)

        level = st.session_state.selected_level
        if st.session_state.get('selected_workout'):
            workout_label = st.session_state.selected_workout
            the_day = st.session_state.get('selected_workout_day', 'Selected')
            st.subheader(f"**{the_day}: {workout_label}** (Level {level})");
            workout_badge(workout_label)
            if st.button("üîÑ Return to Today's Workout"):
                st.session_state.selected_workout = None;
                st.session_state.selected_workout_day = None;
                st.rerun()
        else:
            today = current_day_name()
            workout_label = get_schedule(level).get(today, "REST")
            st.subheader(f"**Today ({today}): {workout_label}** (Level {level})");
            workout_badge(workout_label)

        workout_date = date.today().isoformat()
        exercises = get_exercises_for_day(level, st.session_state.get('selected_workout_day', current_day_name()),
                                          picked_label=workout_label)

        grouped = {}
        for ex in exercises: grouped.setdefault(ex.get("category", "General"), []).append(ex)
        for cat, items in grouped.items():
            if len(grouped) > 1: st.markdown(f'<div class="category-header">{cat}</div>', unsafe_allow_html=True)
            for i, ex in enumerate(items, start=1): render_exercise_card(ex, i, workout_label, workout_date)

        # Summary
        total_ex = len(exercises);
        total_sets_all = 0;
        completed_sets_all = 0;
        completed_exercises = 0
        for ex in exercises:
            name = ex["name"];
            ex_key = exercise_key(workout_label, name, workout_date)
            if "submoves" in ex:
                sub_total = len(ex["submoves"]);
                sub_done = 0
                for i, sub in enumerate(ex["submoves"], start=1):
                    if submove_key(ex_key, sub["name"], i) in st.session_state.completed_exercises: sub_done += 1
                total_sets_all += sub_total;
                completed_sets_all += sub_done
                if sub_total > 0 and sub_done == sub_total: completed_exercises += 1
            else:
                t = parse_set_count(ex.get("sets", "‚Äî"));
                total_sets_all += t;
                done = 0
                for s in range(1, t + 1):
                    if f"{ex_key}_set_{s}" in st.session_state.completed_exercises: done += 1
                completed_sets_all += done
                if t > 0 and done == t: completed_exercises += 1
                if t == 0 and f"{ex_key}_simple" in st.session_state.completed_exercises: completed_exercises += 1
        if total_ex > 0:
            ex_pct = (completed_exercises / total_ex) * 100
            set_pct = (completed_sets_all / total_sets_all) * 100 if total_sets_all > 0 else 0
            st.markdown(f"""
            <div class="workout-summary">
              <h4 style="margin-top:0;">Workout Progress Summary</h4>
              <p><b>Exercises Completed:</b> {completed_exercises}/{total_ex} ({ex_pct:.1f}%)</p>
              <p><b>Total Sets Completed:</b> {completed_sets_all}/{total_sets_all} ({set_pct:.1f}%)</p>
            </div>
            """, unsafe_allow_html=True)

    # -----------------------------
    # Meal Plan Sample ‚Äî Weekly plans + Daily Intake Guide + Education
    # -----------------------------
    WEEKLY_MEALS = {
        "Option A: Omnivore": {
            "Mon": ["Greek yogurt + berries + oats",
                    "Chicken, rice & broccoli",
                    "Salmon, sweet potato, asparagus"],
            "Tue": ["Omelet + toast + fruit",
                    "Turkey wrap + mixed greens",
                    "Beef stir-fry + jasmine rice"],
            "Wed": ["Protein smoothie (whey) + banana + PB",
                    "Chicken fajita bowl",
                    "Shrimp tacos + slaw"],
            "Thu": ["Overnight oats + chia + berries",
                    "Sushi bowl (salmon, rice, edamame)",
                    "Lean beef chili + quinoa"],
            "Fri": ["Eggs + avocado toast",
                    "Grilled chicken Caesar (light dressing)",
                    "Baked cod + potatoes + green beans"],
            "Sat": ["Protein pancakes + fruit",
                    "Turkey burger (whole-grain bun) + salad",
                    "Steak + rice + vegetables"],
            "Sun": ["Cottage cheese + pineapple + granola",
                    "Chicken pesto pasta + veggies",
                    "Roast chicken + couscous + salad"]
        },
        "Option B: Pescatarian": {
            "Mon": ["Greek yogurt + berries + oats",
                    "Tuna salad wrap + greens",
                    "Salmon, sweet potato, asparagus"],
            "Tue": ["Tofu scramble + toast",
                    "Shrimp quinoa bowl",
                    "Baked cod + potatoes + broccoli"],
            "Wed": ["Protein smoothie (whey/pea) + banana",
                    "Sushi bowl (salmon, seaweed, rice)",
                    "Garlic shrimp pasta + side salad"],
            "Thu": ["Overnight oats + chia",
                    "Miso salmon + rice + bok choy",
                    "Veggie chili + avocado toast"],
            "Fri": ["Eggs + avocado toast",
                    "Mediterranean tuna pasta",
                    "Seared tuna + rice + edamame"],
            "Sat": ["Protein pancakes + fruit",
                    "Grilled shrimp tacos + slaw",
                    "Baked halibut + quinoa + veg"],
            "Sun": ["Cottage cheese + fruit",
                    "Smoked salmon bagel (light)",
                    "Shrimp stir-fry + brown rice"]
        },
        "Option C: Vegan": {
            "Mon": ["Tofu scramble + whole-grain toast + fruit",
                    "Lentil quinoa bowl + veggies",
                    "Tempeh stir-fry + rice"],
            "Tue": ["Overnight oats + chia + berries",
                    "Chickpea wrap + greens",
                    "Black bean pasta + broccoli"],
            "Wed": ["Pea-protein smoothie + banana + PB",
                    "Buddha bowl (tofu, edamame, rice, veg)",
                    "Lentil curry + basmati rice"],
            "Thu": ["Buckwheat pancakes + fruit",
                    "Hummus + falafel bowl + tabbouleh",
                    "Tofu poke bowl"],
            "Fri": ["Tofu scramble burrito",
                    "Pea-protein pasta + marinara + veg",
                    "Tempeh fajitas + tortillas"],
            "Sat": ["Oatmeal + seeds + berries",
                    "Chickpea quinoa bowl",
                    "Tofu steak + potatoes + veg"],
            "Sun": ["Soy yogurt + granola + fruit",
                    "Vegan sushi + edamame",
                    "Lentil bolognese + pasta"]
        }
    }

    # Example-food guides (from your screenshots) for target grams per meal
    CARB_CHOICES_67g = ["Apple ~2‚Öî pcs (‚âà556 g)", "Sweet potato ~1¬Ω serving (‚âà216 g)",
                        "Banana ~2‚Öî pcs (‚âà319 g)", "Brown rice ~1 serving (‚âà204 g)",
                        "Oatmeal ~1 serving (‚âà97 g)", "Grapefruit 3 pcs (‚âà886 g)",
                        "Whole wheat bread ~1‚Öî serving (‚âà118 g)"]
    PRO_CHOICES_40g = ["Salmon ~4 servings (‚âà197 g)", "Chicken breast ~1‚Öî serving (‚âà175 g)",
                       "Egg ~6¬Ω servings (‚âà323 g)", "Beef rump ~1 serving (‚âà192 g)",
                       "Pork tenderloin ~1¬Ω serving (‚âà288 g)", "Pea/soy protein scoop per label"]
    FAT_CHOICES_16g = ["Almond ~1 serving (29 g)", "Olive oil ~3‚Öì tsp (16 g)",
                       "Avocado ~1 piece (86 g)", "Cheese ~3¬Ω servings (70 g)"]

    def render_weekly_meal_plans():
        st.subheader("Weekly Meal Plans")
        choice = st.selectbox("Select your plan:", list(WEEKLY_MEALS.keys()))
        plan = WEEKLY_MEALS[choice]
        df = pd.DataFrame(plan).T
        df.columns = ["Breakfast", "Lunch", "Dinner"]
        st.dataframe(df, use_container_width=True)

        st.markdown("**Vegan ‚Äî Grow Your Glutes (quick tips):**")
        st.markdown("""
        - Prioritize **protein** each meal (tofu, tempeh, seitan, edamame, beans, pea/soy protein powders).  
        - Hit **progressive overload** on glute movements (hip thrusts, RDLs, Bulgarians) and **eat enough** total calories.  
        - **Creatine monohydrate 3‚Äì5 g/day** can support higher-quality training and lean mass. Take daily; consistency matters.  
        - Drink plenty of **water** (aim ~2‚Äì3+ L/day, more if training hard) and avoid **crash diets**.
        """)

        with st.expander("Why creatine and why not crash diets? (sources)"):
            st.markdown("""
    - ISSN Position Stand: Creatine is safe and effective for performance and lean mass.  
      https://jissn.biomedcentral.com/articles/10.1186/s12970-017-0173-z  
    - Crash diets increase **lean mass** losses and can reduce metabolic rate; slow, protein-sufficient loss is safer.  
      https://www.health.harvard.edu/staying-healthy/why-crash-diets-are-a-bad-idea
            """)

    def render_daily_intake_guide():
        st.subheader("Daily Intake Guide (per-meal targets like your screenshots)")
        c1, c2, c3 = st.columns(3)
        with c1:
            daily_kcal = st.number_input("Daily calorie target (kcal)", min_value=1000, max_value=4000, value=1730,
                                         step=10)
            meals = st.slider("Meals per day", 2, 6, 3)
        with c2:
            carbs_g = st.number_input("Carbs / meal (g)", min_value=0, max_value=250, value=67)
            protein_g = st.number_input("Protein / meal (g)", min_value=0, max_value=150, value=40)
        with c3:
            fat_g = st.number_input("Fat / meal (g)", min_value=0, max_value=100, value=16)
        per_meal_kcal = round(daily_kcal / meals)
        st.info(
            f"**Per meal:** ~{per_meal_kcal} kcal  |  {carbs_g} g carbs  |  {protein_g} g protein  |  {fat_g} g fat")

        st.markdown("**What if you want to consume these per-meal targets? Try one of these:**")
        colA, colB, colC = st.columns(3)
        with colA:
            st.markdown("**Carbohydrates ~ target grams**")
            for item in CARB_CHOICES_67g: st.markdown(f"- {item}")
        with colB:
            st.markdown("**Protein ~ target grams**")
            for item in PRO_CHOICES_40g: st.markdown(f"- {item}")
        with colC:
            st.markdown("**Fat ~ target grams**")
            for item in FAT_CHOICES_16g: st.markdown(f"- {item}")

        with st.expander("Education: Lean body mass vs. muscle mass (sources)"):
            st.markdown("""
    - **Lean Body Mass (LBM)** = your **total body weight minus fat** (also called *fat-free mass*). It includes muscle, bone, organs, and water.  
      https://en.wikipedia.org/wiki/Lean_body_mass  
    - **Muscle mass**: when people say "gain muscle", they mean **skeletal muscle mass** (the only type you can grow with training/nutrition to build your glutes).  
      https://en.wikipedia.org/wiki/Skeletal_muscle
            """)

    def render_meal_plan_sample_tab():
        render_weekly_meal_plans()
        st.markdown("---")
        render_daily_intake_guide()

    # -----------------------------
    # Weight Tracker (weight, water, energy balance)
    # -----------------------------
    def render_weight_tracker_tab():
        st.markdown("### Daily Check-ins: Weight ‚Ä¢ Water ‚Ä¢ Energy Balance")

        with st.expander("Add Today's Entry"):
            c1, c2, c3 = st.columns(3)
            with c1:
                weight = st.number_input("Weight (lb)", min_value=70.0, max_value=400.0, value=150.0, step=0.2)
                water_l = st.number_input("Water (liters)", min_value=0.0, max_value=10.0, value=2.5, step=0.1)
            with c2:
                kcal_in = st.number_input("Calories IN (food)", min_value=0, max_value=8000, value=1700, step=50)
                kcal_out = st.number_input("Calories OUT (exercise est.)", min_value=0, max_value=5000, value=500,
                                           step=25)
            with c3:
                energy_feel = st.slider("Energy level (1‚Äì10)", 1, 10, 7)
                waist = st.number_input("Waist (in)", min_value=20.0, max_value=70.0, value=30.0, step=0.25)
                hips = st.number_input("Hips (in)", min_value=25.0, max_value=80.0, value=36.0, step=0.25)
            notes = st.text_area("Notes (optional)", placeholder="Sleep, soreness, cravings, etc.")
            photo = st.file_uploader("Progress photo (optional)", type=["png", "jpg", "jpeg"], key="prog_photo")
            if st.button("Save Today"):
                entry = {
                    "date": date.today().isoformat(),
                    "weight": float(weight),
                    "water_l": float(water_l),
                    "kcal_in": int(kcal_in),
                    "kcal_out": int(kcal_out),
                    "kcal_balance": int(kcal_in) - int(kcal_out),
                    "energy_level": int(energy_feel),
                    "waist": float(waist),
                    "hips": float(hips),
                    "waist_hip_ratio": round(float(waist) / float(hips), 3) if hips else None,
                    "notes": notes or "",
                    "photo_path": None
                }
                if photo: entry["photo_path"] = save_progress_photo(photo, "update")
                st.session_state.progress_entries.append(entry);
                save_user_data()
                st.success("Entry saved!");
                st.rerun()

        if st.session_state.progress_entries:
            st.markdown("#### Recent Entries")
            recent = sorted(st.session_state.progress_entries, key=lambda x: x['date'], reverse=True)[:10]
            for e in recent:
                st.markdown(f"""
                <div class="progress-card">
                  <h4 style="margin:0 0 6px 0;">{e['date']}</h4>
                  <div style="display:grid;grid-template-columns:repeat(4,1fr);gap:8px;">
                    <div><b>Weight:</b> {e['weight']} lb</div>
                    <div><b>Water:</b> {e['water_l']} L</div>
                    <div><b>Energy:</b> {e['energy_level']}/10</div>
                    <div><b>Energy Balance:</b> {e['kcal_balance']} kcal</div>
                  </div>
                  <div style="display:grid;grid-template-columns:repeat(3,1fr);gap:8px;margin-top:6px;">
                    <div><b>Waist:</b> {e['waist']}"</div>
                    <div><b>Hips:</b> {e['hips']}"</div>
                    <div><b>W/H Ratio:</b> {e['waist_hip_ratio']}</div>
                  </div>
                  {"<p><b>Notes:</b> " + e['notes'] + "</p>" if e.get('notes') else ""}
                </div>
                """, unsafe_allow_html=True)
                if e.get('photo_path') and os.path.exists(e['photo_path']):
                    st.image(e['photo_path'], caption=f"Progress photo ‚Äî {e['date']}", width=280)

            # Quick tables
            df = pd.DataFrame(sorted(st.session_state.progress_entries, key=lambda x: x['date']))
            st.markdown("#### Trend Tables")
            st.dataframe(df[['date', 'weight', 'water_l', 'kcal_in', 'kcal_out', 'kcal_balance', 'energy_level']],
                         use_container_width=True)

    # -----------------------------
    # Sidebar
    # -----------------------------
    def sidebar_controls():
        with st.sidebar:
            st.header("Settings")
            st.info(f"Current Training Level: {st.session_state.selected_level}")
            st.markdown("---")
            if st.button("Save Progress File"):
                save_user_data()
                st.success("Saved!")

            st.markdown("### Media")
            st.caption(f"Upload exercise videos inside each exercise card (max {MAX_VIDEO_MB} MB per file).")
            if os.path.exists(EXERCISE_VIDEOS_DIR):
                vids = [f for f in os.listdir(EXERCISE_VIDEOS_DIR) if
                        f.lower().endswith(('.mp4', '.mov', '.avi', '.webm'))]
                st.write(f"Uploaded videos: **{len(vids)}**")

            st.markdown("---")
            st.markdown("### Danger Zone")
            if st.button("Clear All Data"):
                st.warning("This will delete saved progress and uploaded media.")
            if st.checkbox("Confirm deletion"):
                # reset session state
                st.session_state.completed_exercises = []
                st.session_state.progress_entries = []
                st.session_state.selected_workout = None
                st.session_state.selected_workout_day = None

                # remove files/folders
                if os.path.exists(UPLOAD_ROOT): shutil.rmtree(UPLOAD_ROOT)
                if os.path.exists(USER_DATA_DIR): shutil.rmtree(USER_DATA_DIR)
                ensure_dirs()
                st.success("All data cleared.")
                st.rerun()
    # Hourglass Workout Program by Joane Aristilde ‚Äî PDF-accurate Streamlit app
    # Adds: per-exercise video uploads (size-limited), Booty A/B (L2) variation,
    # 1-week meal plan selector (Omni / Pescatarian / Vegan), Daily Intake Guide,
    # Vegan "grow your glutes" notes incl. creatine & hydration guidance,
    # upgraded progress tracker (weight, water, energy balance).
    # Facts include short citations with URLs (see Education section).

    import streamlit as st
    import pandas as pd
    import os, json, shutil, re
    from datetime import datetime, date
    from PIL import Image

    # -----------------------------
    # Page & constants
    # -----------------------------
    st.set_page_config(page_title="Hourglass Fitness Program by Joane Aristilde",
                       page_icon="üèãÔ∏è‚Äç‚ôÄÔ∏è", layout="wide")

    MAX_VIDEO_MB = 50  # limit per video upload
    UPLOAD_ROOT = "uploaded_content"
    MAIN_MEDIA_DIR = os.path.join(UPLOAD_ROOT, "main_media")
    EXERCISE_VIDEOS_DIR = os.path.join(UPLOAD_ROOT, "exercise_videos")
    PROGRESS_DIR = os.path.join(UPLOAD_ROOT, "progress_photos")
    USER_DATA_DIR = "user_data"

    # -----------------------------
    # Styles
    # -----------------------------
    st.markdown("""
    <style>
        .main { background: linear-gradient(135deg, #ffeef8 0%, #fff5f8 50%, #f0f8ff 100%); }
        .main-header {
            font-size: 3rem; font-weight: 800; text-align: center;
            background: linear-gradient(45deg, #FF1493, #FF69B4, #DA70D6);
            -webkit-background-clip: text; -webkit-text-fill-color: transparent;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1); margin-bottom: .5rem;
        }
        .sub-header { font-size: 1.1rem; text-align: center; color: #666; margin-bottom: 1rem; font-weight: 300; }
        .hero-section {
            text-align: center; padding: 1.2rem .8rem;
            background: linear-gradient(135deg, rgba(255,20,147,.15), rgba(255,105,180,.15), rgba(218,112,214,.15));
            border-radius: 18px; margin-bottom: 10px; backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(0,0,0,.08); border: 1px solid rgba(255,255,255,.35);
        }
        .weekly-box { background: rgba(255,255,255,.96); padding: 12px; border-radius: 14px;
            margin: 8px 0 14px 0; box-shadow: 0 4px 15px rgba(0,0,0,.08); border-left: 5px solid #FF1493; }
        .category-header { background: linear-gradient(45deg,#FF69B4,#DA70D6); color:#fff;
            padding: 10px; border-radius: 10px; text-align:center; font-weight:700; margin: 12px 0 8px 0; }
        .exercise-card { background: rgba(255,255,255,.98); padding: 12px; border-radius: 12px;
            box-shadow: 0 4px 15px rgba(0,0,0,.08); margin: 8px 0; border-left: 5px solid #FF1493; }
        .completed-card { background: rgba(232,245,232,.95); border-left: 5px solid #4CAF50; }
        .video-section { background: rgba(240,248,255,.95); padding: 8px; border-radius: 8px; border: 2px solid #4169E1; }
        .workout-summary { background: rgba(255,248,220,.95); padding: 12px; border-radius: 12px; border-left: 5px solid #FFD700; margin: 12px 0; }
        .meal-item { background: rgba(240,248,255,.95); padding: 10px; border-radius: 10px; margin: 8px 0; border-left: 4px solid #4169E1; }
        .progress-card { background: rgba(255,240,245,.95); padding: 12px; border-radius: 12px; border-left: 5px solid #FF69B4; margin: 8px 0; }
        .badge { display:inline-block;padding:6px 10px;border-radius:12px;color:#fff;font-weight:700;margin:6px 0; }
        .info-section {
            background: rgba(255,255,255,.96); padding: 16px; border-radius: 14px;
            margin: 12px 0; box-shadow: 0 4px 15px rgba(0,0,0,.08); 
            border-left: 5px solid #20B2AA;
        }
        .home-button {
            background: linear-gradient(45deg, #FF1493, #FF69B4);
            color: white; padding: 8px 16px; border-radius: 20px;
            border: none; font-weight: bold; margin: 4px;
        }
    </style>
    """, unsafe_allow_html=True)

    # -----------------------------
    # Utilities
    # -----------------------------
    def ensure_dirs():
        for d in [UPLOAD_ROOT, MAIN_MEDIA_DIR, EXERCISE_VIDEOS_DIR, PROGRESS_DIR, USER_DATA_DIR]:
            os.makedirs(d, exist_ok=True)

    def _timestamp_name(prefix, original_name):
        ext = original_name.split(".")[-1].lower()
        ts = datetime.now().strftime("%Y%m%d_%H%M%S")
        return f"{prefix}_{ts}.{ext}"

    def _latest(directory, prefix):
        if not os.path.exists(directory): return None
        matches = [os.path.join(directory, f) for f in os.listdir(directory) if f.startswith(prefix)]
        return max(matches, key=os.path.getmtime) if matches else None

    def parse_set_count(sets_string):
        """
        Count checkable sets:
        - Include AMRAP sets in the count
        - Exclude warm-up sets
        - If '1 set each' => 1 (finishers have sub-moves tracked separately)
        - '‚Äî' => 0
        """
        if not sets_string or sets_string.strip() == "‚Äî":
            return 0
        s = sets_string.lower()
        cleaned = re.sub(r'\d+\s*warm[- ]*up.*?(?:\+|$)', '', s)
        nums = re.findall(r'\d+', cleaned)
        if not nums:
            return 1 if "set each" in s else 0
        return sum(int(n) for n in nums)

    def save_progress_photo(uploaded_file, photo_type):
        ensure_dirs()
        filename = _timestamp_name(f"progress_{photo_type}", uploaded_file.name)
        path = os.path.join(PROGRESS_DIR, filename)
        with open(path, "wb") as f: f.write(uploaded_file.getbuffer())
        return path

    def save_exercise_video(uploaded_file, key_slug):
        """Save per-exercise demo video with size cap."""
        ensure_dirs()
        size_mb = len(uploaded_file.getbuffer()) / (1024 * 1024)
        if size_mb > MAX_VIDEO_MB:
            st.error(f"Video too large: {size_mb:.1f} MB (limit {MAX_VIDEO_MB} MB). Please upload a smaller file.")
            return None
        safe_key = re.sub(r'[^a-z0-9_]+', '_', key_slug.lower())
        filename = _timestamp_name(f"exercise_{safe_key}", uploaded_file.name)
        path = os.path.join(EXERCISE_VIDEOS_DIR, filename)
        with open(path, "wb") as f: f.write(uploaded_file.getbuffer())
        return path

    def find_exercise_video(key_slug):
        ensure_dirs()
        safe_key = re.sub(r'[^a-z0-9_]+', '_', key_slug.lower())
        candidates = [os.path.join(EXERCISE_VIDEOS_DIR, f) for f in os.listdir(EXERCISE_VIDEOS_DIR) if
                      safe_key in f.lower()]
        return max(candidates, key=os.path.getmtime) if candidates else None

    def save_user_data():
        ensure_dirs()
        data = {
            'completed_exercises': st.session_state.get('completed_exercises', []),
            'selected_level': st.session_state.get('selected_level', 1),
            'progress_entries': st.session_state.get('progress_entries', []),
            'selected_workout': st.session_state.get('selected_workout', None),
            'selected_workout_day': st.session_state.get('selected_workout_day', None),
            'current_page': st.session_state.get('current_page', 'Home'),
            'last_updated': datetime.now().isoformat()
        }
        with open(os.path.join(USER_DATA_DIR, 'user_progress.json'), 'w') as f:
            json.dump(data, f, indent=2)

    def load_user_data():
        try:
            with open(os.path.join(USER_DATA_DIR, 'user_progress.json'), 'r') as f:
                data = json.load(f)
            for k, v in data.items():
                if k != 'last_updated': st.session_state[k] = v
            return True
        except FileNotFoundError:
            return False

    def workout_badge(label):
        colors = {
            "BOOTY": "#FF69B4", "BOOTY A": "#FF69B4", "BOOTY B": "#FF69B4",
            "LEGS & BOOTY": "#8A2BE2", "ABS/CORE & CARDIO": "#1E90FF",
            "ABS/CORE ONLY (you can do at home)": "#1E90FF",
            "LIGHT SHOULDERS & BACK": "#20B2AA", "SHOULDERS & ABS/CORE": "#20B2AA",
            "REST": "#28a745"
        }
        color = colors.get(label, "#555")
        st.markdown(f"<div class='badge' style='background:{color};'>{label}</div>", unsafe_allow_html=True)

    # -----------------------------
    # PDF-accurate program (names, sets, reps, stairmaster)
    # -----------------------------
    PROGRAM_SPLIT = {
        "Level 1": {
            "Monday": "BOOTY",
            "Tuesday": "ABS/CORE & CARDIO",
            "Wednesday": "REST",
            "Thursday": "LEGS & BOOTY",
            "Friday": "ABS/CORE ONLY (you can do at home)",
            "Saturday": "LIGHT SHOULDERS & BACK",
            "Sunday": "REST"
        },
        "Level 2": {
            "Monday": "BOOTY A",  # L2 has two distinct booty days
            "Tuesday": "LIGHT SHOULDERS & BACK",
            "Wednesday": "ABS/CORE & CARDIO",
            "Thursday": "BOOTY B",
            "Friday": "SHOULDERS & ABS/CORE",
            "Saturday": "LEGS & BOOTY",
            "Sunday": "REST"
        }
    }

    def warmup_item():
        return {"name": "Booty/ Leg Activation", "sets": "‚Äî", "reps": "5 min", "category": "Warm-up"}

    def stretching_item():
        return {"name": "Stretching", "sets": "‚Äî", "reps": "5 min", "category": "Recovery"}

    # Updated stairmaster workouts (replacing treadmill)
    def stairmaster_L1():
        return {"name": "Stairmaster Workout", "sets": "‚Äî", "reps": "30 min: fat loss levels 8-10",
                "category": "Cardio"}

    def stairmaster_L2():
        return {"name": "Stairmaster Workout", "sets": "‚Äî", "reps": "30 min: fat loss levels 8-10",
                "category": "Cardio"}

    def stairmaster_booty_warmup():
        return {"name": "Stairmaster Warm-up", "sets": "‚Äî", "reps": "20 min: levels 5-6 (booty day warm-up)",
                "category": "Warm-up"}

    KICKBACKS = {"name": "Kickbacks", "sets": "1 warm up set + 3 (each side)",
                 "reps": "10-12 reps; 12-15 reps (last set)", "category": "Booty"}
    HIP_THRUST = {"name": "Hip Thrust", "sets": "1 warm up set + 3 + 1 AMRAP",
                  "reps": "10-12 reps; 8 reps (last set); AMRAP ~20% avg weight", "category": "Booty"}
    HYPEREXT = {"name": "Hyperextensions", "sets": "(1 warm up set) + 3 + 1 AMRAP (no weight)",
                "reps": "10-12 reps; 10s hold on last rep each set", "category": "Booty"}
    RDLS = {"name": "RDLs (Romanian Deadlifts)", "sets": "1 warm up set + 3", "reps": "10-12 reps; 8 reps (last set)",
            "category": "Booty"}
    ABDUCTORS = {"name": "Abductors", "sets": "(1 warm up set) + 3", "reps": "10-12 reps; 12-15 reps (last set)",
                 "category": "Booty"}
    BULGARIAN = {"name": "Bulgarian Split Squats", "sets": "1 warm up set + 3 (each side) + 1 AMRAP (no weight)",
                 "reps": "10-12 reps; 8 reps (last set)", "category": "Legs"}
    LEG_CURL = {"name": "Leg Curl", "sets": "(1 warm up set) + 3", "reps": "10-12 reps; 12-15 reps (last set)",
                "category": "Legs"}
    LEG_PRESS = {"name": "Leg Press", "sets": "1 warm up set + 3", "reps": "10-12 reps; 8-10 reps (last set)",
                 "category": "Legs"}

    LEG_FINISHER = {
        "name": "Leg Finisher (light weight)", "sets": "1 set each",
        "reps": "Single Leg Hip Thrust 15-20 reps, Sumo Squats 15-20 reps, Squat Jumps 10-12 reps", "category": "Booty",
        "submoves": [
            {"name": "Single Leg Hip Thrust", "sets": "1", "reps": "15-20 reps"},
            {"name": "Sumo Squats", "sets": "1", "reps": "15-20 reps"},
            {"name": "Squat Jumps", "sets": "1", "reps": "10-12 reps"}
        ]
    }
    BOOTY_FINISHER_B = {
        "name": "Leg Finisher (light weight) ‚Äî Focus Sumo + Jumps", "sets": "1 set each",
        "reps": "Sumo Squats 15-20 reps, Squat Jumps 10-12 reps, Single Leg Hip Thrust 15-20 reps",
        "category": "Booty", "submoves": [
            {"name": "Sumo Squats", "sets": "1", "reps": "15-20 reps"},
            {"name": "Squat Jumps", "sets": "1", "reps": "10-12 reps"},
            {"name": "Single Leg Hip Thrust", "sets": "1", "reps": "15-20 reps"}
        ]
    }

    # Updated day templates with stairmaster and booty warmups
    BOOTY_L1 = [stairmaster_booty_warmup(), warmup_item(), KICKBACKS, HIP_THRUST, HYPEREXT, RDLS, stairmaster_L1(),
                stretching_item()]
    BOOTY_L2_CORE = [stairmaster_booty_warmup(), warmup_item(), KICKBACKS, HIP_THRUST, HYPEREXT, RDLS, ABDUCTORS]
    BOOTY_L2_A = BOOTY_L2_CORE + [LEG_FINISHER, stretching_item()]
    BOOTY_L2_B = BOOTY_L2_CORE + [BOOTY_FINISHER_B, stretching_item()]
    LEGS_BOOTY_L1 = [warmup_item(), HIP_THRUST, HYPEREXT, BULGARIAN, LEG_CURL, stairmaster_L1(), stretching_item()]
    LEGS_BOOTY_L2 = [warmup_item(), HIP_THRUST, HYPEREXT, BULGARIAN, LEG_PRESS, LEG_CURL, stairmaster_L2(),
                     stretching_item()]

    # Light Shoulders & Back
    LSB_L1 = [
        {"name": "Warm Up Mobility", "sets": "‚Äî", "reps": "5 min", "category": "Warm-up"},
        {"name": "Lat Pulldown Wide Grip", "sets": "1 warm up set + 3", "reps": "10-12 reps; 8-10 reps (last set)",
         "category": "Back"},
        {"name": "Close Grip Rows", "sets": "3", "reps": "8-10 reps", "category": "Back"},
        {"name": "Db Lateral Raises", "sets": "1 warm up set + 3", "reps": "10-12 reps", "category": "Shoulders"},
        {"name": "Db Shoulder Press", "sets": "1 warm up set + 3", "reps": "10-12 reps", "category": "Shoulders"},
        {"name": "Face Pulls", "sets": "3", "reps": "12-15 reps", "category": "Shoulders"}
    ]
    LSB_L2 = [
        {"name": "Warm Up Mobility", "sets": "‚Äî", "reps": "5 min", "category": "Warm-up"},
        {"name": "Lat Pulldown Wide Grip", "sets": "1 warm up set + 3", "reps": "10-12 reps; 8-10 reps (last set)",
         "category": "Back"},
        {"name": "Lat Pulldown Close Grip", "sets": "3", "reps": "8-10 reps", "category": "Back"},
        {"name": "Wide Grip Rows", "sets": "3", "reps": "8-10 reps", "category": "Back"},
        {"name": "Close Grip Rows", "sets": "3", "reps": "8-10 reps", "category": "Back"},
        {"name": "Db Single Arm Rows", "sets": "3 (each side)", "reps": "10-12 reps", "category": "Back"},
        {"name": "Face Pulls", "sets": "3", "reps": "12-15 reps", "category": "Shoulders"}
    ]

    # Shoulders & Abs/Core (single list per PDF)
    SH_ABS = [
        {"name": "Warm Up Mobility", "sets": "‚Äî", "reps": "5 min", "category": "Warm-up"},
        {"name": "Db Lateral Raises", "sets": "3", "reps": "10-12 reps", "category": "Shoulders"},
        {"name": "Db Bent Over Lateral Raises", "sets": "3", "reps": "10-12 reps", "category": "Shoulders"},
        {"name": "Db Shoulder Press", "sets": "1 warm up set + 3", "reps": "10-12 reps", "category": "Shoulders"},
        {"name": "Db Front Raises", "sets": "3", "reps": "10-12 reps", "category": "Shoulders"},
        {"name": "Gorilla Rows", "sets": "3", "reps": "10-12 reps", "category": "Back"},
        {"name": "Face Pulls", "sets": "3", "reps": "12-15 reps", "category": "Shoulders"},
        # Abs/Core circuit (repeat 2x)
        {"name": "Plank", "sets": "1", "reps": "1 min", "category": "Core"},
        {"name": "Reverse Plank", "sets": "1", "reps": "1 min", "category": "Core"},
        {"name": "Reverse Plank Knee Tucks", "sets": "1", "reps": "30 sec", "category": "Core"},
        {"name": "Reverse Plank Dips", "sets": "1", "reps": "30 sec", "category": "Core"},
        {"name": "Leg Bridge Knee Tucks", "sets": "1", "reps": "30 sec", "category": "Core"},
        {"name": "Frog Crunches", "sets": "1", "reps": "30 sec", "category": "Core"},
        {"name": "Butterfly Kicks", "sets": "1", "reps": "30 sec", "category": "Core"},
        {"name": "Half Leg Raises", "sets": "1", "reps": "30 sec", "category": "Core"},
        {"name": "Dead Bugs", "sets": "1", "reps": "30 sec", "category": "Core"},
        {"name": "Superman hold", "sets": "1", "reps": "30 sec", "category": "Core"},
        {"name": "Repeat abs & core 2x", "sets": "‚Äî", "reps": "Complete the circuit twice", "category": "Core"},
    ]

    ABS_CORE_CIRCUIT = [
        {"name": "Plank", "sets": "1", "reps": "1 min", "category": "Core"},
        {"name": "High Plank", "sets": "1", "reps": "1 min", "category": "Core"},
        {"name": "High Plank Leg Lifts", "sets": "1", "reps": "30 sec", "category": "Core"},
        {"name": "Plank Knee Taps", "sets": "1", "reps": "30 sec", "category": "Core"},
        {"name": "Superman Hold", "sets": "1", "reps": "30 sec", "category": "Core"},
        {"name": "Reverse Plank", "sets": "1", "reps": "1 min", "category": "Core"},
        {"name": "Reverse Plank Knee Tucks", "sets": "1", "reps": "30 sec", "category": "Core"},
        {"name": "Reverse Plank Dips", "sets": "1", "reps": "30 sec", "category": "Core"},
        {"name": "Glute Bridge Marches", "sets": "1", "reps": "30 sec", "category": "Core"},
        {"name": "Single Leg Bridge Hold", "sets": "1", "reps": "30 sec (each side)", "category": "Core"},
        {"name": "Leg Bridge Knee Tucks", "sets": "1", "reps": "30 sec", "category": "Core"},
        {"name": "Around The Worlds", "sets": "1", "reps": "30 sec (each side)", "category": "Core"},
        {"name": "Repeat abs & core 2x", "sets": "‚Äî", "reps": "Complete the circuit twice", "category": "Core"},
    ]
    ABS_CORE_ONLY = [
        {"name": "Plank", "sets": "1", "reps": "1 min", "category": "Core"},
        {"name": "Plank Knee Taps", "sets": "1", "reps": "30 sec", "category": "Core"},
        {"name": "Reverse Plank", "sets": "1", "reps": "1 min", "category": "Core"},
        {"name": "Reverse Plank Knee Tucks", "sets": "1", "reps": "30 sec", "category": "Core"},
        {"name": "Reverse Plank Dips", "sets": "1", "reps": "30 sec", "category": "Core"},
        {"name": "Glute Bridge Marches", "sets": "1", "reps": "30 sec", "category": "Core"},
        {"name": "Single Leg Bridge Hold", "sets": "1", "reps": "30 sec (each side)", "category": "Core"},
        {"name": "Leg Bridge Knee Tucks", "sets": "1", "reps": "30 sec", "category": "Core"},
        {"name": "Butterfly Kicks", "sets": "1", "reps": "30 sec", "category": "Core"},
        {"name": "Half Leg Raises", "sets": "1", "reps": "30 sec", "category": "Core"},
        {"name": "Dead Bugs", "sets": "1", "reps": "30 sec", "category": "Core"},
        {"name": "Frog Crunches", "sets": "1", "reps": "30 sec", "category": "Core"},
        {"name": "Around The Worlds", "sets": "1", "reps": "30 sec (each side)", "category": "Core"},
        {"name": "Repeat 2x total", "sets": "‚Äî", "reps": "Complete entire circuit twice", "category": "Core"},
    ]

    # -----------------------------
    # Session init
    # -----------------------------
    if 'initialized' not in st.session_state:
        st.session_state.initialized = True
        ensure_dirs()
        load_user_data()

    defaults = {
        'completed_exercises': [], 'selected_level': 1, 'progress_entries': [],
        'selected_workout': None, 'selected_workout_day': None, 'current_page': 'Home'
    }
    for k, v in defaults.items():
        if k not in st.session_state: st.session_state[k] = v

    # -----------------------------
    # Home button
    # -----------------------------
    def render_home_button():
        if st.button("üè† Home", key="home_btn", help="Return to main page"):
            st.session_state.current_page = 'Home'
            st.session_state.selected_workout = None
            st.session_state.selected_workout_day = None
            save_user_data()
            st.rerun()

    # -----------------------------
    # Hero (always visible at top)
    # -----------------------------
    def render_hero():
        ensure_dirs()
        st.markdown("""
        <div class="hero-section">
            <h1 class="main-header">HOURGLASS FITNESS TRANSFORMATION</h1>
            <p class="sub-header">12-Week plan for Booty, Core, Back & Shoulders ‚Äî by Joane Aristilde</p>
        </div>
        """, unsafe_allow_html=True)
        mode = st.radio("Choose your display:", ["Cover Photo", "Intro Video"], horizontal=True)
        c1, c2 = st.columns([3, 2])
        if mode == "Cover Photo":
            with c1:
                cover = _latest(MAIN_MEDIA_DIR, "cover_")
                st.image(cover, use_container_width=True, caption="Your Transformation Journey") if cover else st.info(
                    "Upload a cover photo on the right.")
            with c2:
                up = st.file_uploader("Upload your transformation photo", type=["png", "jpg", "jpeg"], key="cover_up")
                if up:
                    dst = os.path.join(MAIN_MEDIA_DIR, _timestamp_name("cover", up.name))
                    with open(dst, "wb") as f: f.write(up.getbuffer())
                    st.success("Cover photo saved!");
                    st.image(dst, use_container_width=True)
                existing = _latest(MAIN_MEDIA_DIR, "cover_")
                if existing and st.button("Delete current cover photo"):
                    os.remove(existing);
                    st.success("Photo deleted!");
                    st.rerun()
        else:
            with c1:
                vid = _latest(MAIN_MEDIA_DIR, "intro_")
                st.video(vid);
                st.caption("Your intro video") if vid else st.info("Upload an intro video on the right.")
            with c2:
                upv = st.file_uploader("Upload your intro video", type=["mp4", "mov", "avi", "webm"], key="intro_up")
                if upv:
                    dst = os.path.join(MAIN_MEDIA_DIR, _timestamp_name("intro", upv.name))
                    with open(dst, "wb") as f: f.write(upv.getbuffer())
                    st.success("Intro video saved!");
                    st.video(dst)
                existing = _latest(MAIN_MEDIA_DIR, "intro_")
                if existing and st.button("Delete intro video"):
                    os.remove(existing);
                    st.success("Video deleted!");
                    st.rerun()

    # -----------------------------
    # New content pages
    # -----------------------------
    def render_home_page():
        st.markdown("""
        <div class="info-section">
            <h2>Welcome to Your Hourglass Fitness Transformation</h2>
            <p>Transform your body with this comprehensive 12-week program designed specifically for building your booty, strengthening your core, and sculpting your back and shoulders.</p>

            <h3>Getting Started:</h3>
            <ol>
                <li><strong>Read the Workout Overview:</strong> Understand the program structure</li>
                <li><strong>Learn Progressive Overload:</strong> Master the key principle for muscle building</li>
                <li><strong>Choose Your Level:</strong> Start with Level 1 if you're new to this program</li>
                <li><strong>Begin Your Program:</strong> Follow your daily workouts</li>
                <li><strong>Track Your Progress:</strong> Use the weight tracker to monitor changes</li>
            </ol>

            <div style="background: rgba(255,20,147,0.1); padding: 16px; border-radius: 12px; margin: 20px 0;">
                <h4 style="color: #FF1493; margin-top: 0;">Ready to Start?</h4>
                <p>Navigate through the tabs below to explore different sections. Remember: consistency and proper form are key to your success!</p>
            </div>
        </div>
        """, unsafe_allow_html=True)

    def render_progressive_overload():
        st.markdown("""
        <div class="info-section">
            <h2>Progressive Overload</h2>
            <p>All exercises with weights should be performed according to the principle of "Progressive Overload." This means that you consistently increase your performance. If 12 repetitions feel easy, you raise the weight so that you can only manage 8 repetitions. Over time, you then aim to increase the number of repetitions back to 12. This is how you build muscle.</p>

            <p>The number of reps listed below may therefore vary as you apply progressive overload.</p>

            <h3>How It Works:</h3>
            <ul>
                <li><strong>Start with proper form:</strong> Master the movement pattern before adding weight</li>
                <li><strong>Increase difficulty gradually:</strong> When 12 reps feel easy, increase weight so you can only do 8 reps with good form</li>
                <li><strong>Build back up:</strong> Work to increase reps back to 12 with the new weight</li>
                <li><strong>Track your progress:</strong> Keep records of weights, sets, and reps</li>
            </ul>

            <h3>Safety Guidelines:</h3>
            <ul>
                <li>Never sacrifice form for heavier weight</li>
                <li>Increase weight by small increments (2.5-5 lbs typically)</li>
                <li>Allow adequate rest between sets and training days</li>
                <li>Listen to your body and adjust as needed</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

    def render_workout_overview():
        st.markdown("""
        <div class="info-section">
            <h2>Workout Overview</h2>
            <p>The training plan is structured as follows:</p>

            <p>The categories "Booty", "Legs & Booty" and "Light Shoulders & Back" are divided into Level 1 and Level 2. It's advisable to start with Level 1. If you're slightly more advanced and ready for a challenge, you can begin with Level 2. Beginners should stick with Level 1 until they feel confident with the exercises. Don't forget that the entire split changes when you progress to Level 2.</p>

            <p>The "Abs/Core Only" category is specifically designed for beginners and can be done at home. If you're motivated on a rest day, you can incorporate "Abs/Core Only" into your weekly plan (This also applies to the advanced). However, be cautious not to overexert yourself. The body requires sufficient rest and time for recovery and muscle building.</p>

            <p>The plan for advanced (Level 2) is also my current personal workout plan! However, my training plan changes every 12 weeks. The order of exercises is strategically arranged for an optimal training experience and should be adhered to as closely as possible.</p>
        </div>
        """, unsafe_allow_html=True)

        # -----------------------------
        # Program logic
        # -----------------------------
        def current_day_name():
            return date.today().strftime("%A")

        def get_schedule(level):
            return PROGRAM_SPLIT[f"Level {level}"]

        def get_exercises_for_day(level, day_name, picked_label=None):
            schedule = get_schedule(level)
            label = schedule.get(day_name, "REST") if picked_label is None else picked_label
            if label == "REST":
                return [{"name": "Rest Day", "sets": "‚Äî", "reps": "Active recovery, stretching, or light walk",
                         "category": "Recovery"}]
            if label.startswith("ABS/CORE ONLY"): return ABS_CORE_ONLY
            if label == "ABS/CORE & CARDIO":
                arr = ABS_CORE_CIRCUIT.copy();
                arr.append(stairmaster_L1() if level == 1 else stairmaster_L2());
                return arr
            if label == "SHOULDERS & ABS/CORE": return SH_ABS
            if label == "LIGHT SHOULDERS & BACK": return LSB_L1 if level == 1 else LSB_L2
            if label == "LEGS & BOOTY": return LEGS_BOOTY_L1 if level == 1 else LEGS_BOOTY_L2
            if label in ("BOOTY", "BOOTY A", "BOOTY B"):
                return BOOTY_L1 if level == 1 else (BOOTY_L2_A if label == "BOOTY A" else BOOTY_L2_B)
            return [{"name": label, "sets": "‚Äî", "reps": "", "category": "General"}]

        def weekly_schedule(level):
            st.markdown(
                '<div class="weekly-box"><h4 style="text-align:center;color:#FF1493;margin:0;">YOUR WEEKLY WORKOUT PLAN</h4></div>',
                unsafe_allow_html=True)
            schedule = get_schedule(level);
            today = current_day_name()
            for day, label in schedule.items():
                cols = st.columns([2, 4, 2])
                with cols[0]:
                    st.markdown(f"**{day}**")
                with cols[1]:
                    if label == "REST":
                        st.markdown(f"<i style='color:#28a745;'>REST</i>", unsafe_allow_html=True)
                    else:
                        if st.button(label, key=f"wkbtn_{level}_{day}", use_container_width=True):
                            st.session_state.selected_workout = label
                            st.session_state.selected_workout_day = day
                            st.rerun()
                with cols[2]:
                    st.markdown("üëà TODAY" if day == today else "")

        def exercise_key(workout_label, exercise_name, workout_date):
            return f"ex_{workout_date}_{workout_label}_{exercise_name}".replace(" ", "_").replace("/", "_")

        def submove_key(parent_key, subname, idx):
            return f"{parent_key}_finisher_{idx}_{re.sub(r'[^a-z0-9_]+', '_', subname.lower())}"

        def render_exercise_card(exercise, idx, workout_label, workout_date):
            name = exercise.get("name", "");
            sets = exercise.get("sets", "‚Äî");
            reps = exercise.get("reps", "‚Äî")
            category = exercise.get("category", "General");
            ex_key = exercise_key(workout_label, name, workout_date)
            total_sets = parse_set_count(sets);
            is_finisher_group = isinstance(exercise.get("submoves"), list)

            # count done
            completed = 0
            if is_finisher_group:
                for i, sub in enumerate(exercise["submoves"], start=1):
                    if submove_key(ex_key, sub["name"], i) in st.session_state.completed_exercises: completed += 1
                total = len(exercise["submoves"]);
                fully_done = (completed == total and total > 0)
            else:
                for s in range(1, total_sets + 1):
                    if f"{ex_key}_set_{s}" in st.session_state.completed_exercises: completed += 1
                total = total_sets;
                fully_done = (completed == total and total > 0)

            card_class = "exercise-card completed-card" if fully_done else "exercise-card"
            st.markdown(f"""
            <div class="{card_class}">
              <h4 style="margin:0 0 6px 0;">{idx}. {name}</h4>
              <div><b>Category:</b> {category}</div>
              <div><b>Sets:</b> {sets} &nbsp; | &nbsp; <b>Reps:</b> {reps}</div>
            </div>
            """, unsafe_allow_html=True)

            c1, c2 = st.columns([3, 2])
            with c1:
                if is_finisher_group:
                    st.markdown("**Finisher Tracking (each sub-move tracked separately):**")
                    for i, sub in enumerate(exercise["submoves"], start=1):
                        smk = submove_key(ex_key, sub["name"], i)
                        done = smk in st.session_state.completed_exercises
                        chk = st.checkbox(f"{sub['name']} ‚Äî {sub.get('reps', '')}", key=f"chk_{smk}", value=done)
                        if chk and not done: st.session_state.completed_exercises.append(smk); save_user_data()
                        if not chk and done: st.session_state.completed_exercises.remove(smk); save_user_data()
                    st.info(f"Completed: {completed}/{total} finisher items")
                else:
                    st.markdown("**Track Your Sets:**")
                    parts = [p.strip() for p in sets.split('+')];
                    counter = 1
                    warm_noted = False
                    for p in parts:
                        low = p.lower()
                        if 'warm' in low:
                            if not warm_noted: st.caption("Warm-up sets (not tracked)."); warm_noted = True
                            continue
                        if 'amrap' in low:
                            sk = f"{ex_key}_set_{counter}"
                            chk = st.checkbox("AMRAP Set", key=f"chk_{sk}",
                                              value=(sk in st.session_state.completed_exercises))
                            if chk and sk not in st.session_state.completed_exercises: st.session_state.completed_exercises.append(
                                sk); save_user_data()
                            if not chk and sk in st.session_state.completed_exercises: st.session_state.completed_exercises.remove(
                                sk); save_user_data()
                            counter += 1
                            continue
                        nums = re.findall(r'\d+', p)
                        if nums:
                            for w in range(1, int(nums[0]) + 1):
                                sk = f"{ex_key}_set_{counter}"
                                chk = st.checkbox(f"Working Set {w}", key=f"chk_{sk}",
                                                  value=(sk in st.session_state.completed_exercises))
                                if chk and sk not in st.session_state.completed_exercises: st.session_state.completed_exercises.append(
                                    sk); save_user_data()
                                if not chk and sk in st.session_state.completed_exercises: st.session_state.completed_exercises.remove(
                                    sk); save_user_data()
                                counter += 1
                    if total > 0:
                        st.info(f"Completed: {completed}/{total} sets")
                    else:
                        simp_key = f"{ex_key}_simple"
                        chk = st.checkbox("Mark done", key=f"chk_{simp_key}",
                                          value=(simp_key in st.session_state.completed_exercises))
                        if chk and simp_key not in st.session_state.completed_exercises: st.session_state.completed_exercises.append(
                            simp_key); save_user_data()
                        if not chk and simp_key in st.session_state.completed_exercises: st.session_state.completed_exercises.remove(
                            simp_key); save_user_data()

            with c2:
                st.markdown('<div class="video-section"><b>üìπ Demo Video (optional)</b></div>', unsafe_allow_html=True)
                existing = find_exercise_video(ex_key)
                if existing and os.path.exists(existing):
                    st.video(existing)
                    if st.button(f"Delete video for {name}", key=f"delvid_{ex_key}"):
                        try:
                            os.remove(existing); st.success("Video deleted."); st.rerun()
                        except Exception as e:
                            st.error(f"Could not delete: {e}")
                upv = st.file_uploader(f"Upload video for: {name}", type=["mp4", "mov", "avi", "webm"],
                                       key=f"up_{ex_key}")
                if upv:
                    path = save_exercise_video(upv, ex_key)
                    if path: st.success("Video saved!"); st.video(path)

        def render_workout():
            cols = st.columns(3)
            with cols[0]:
                if st.button("Level 1", use_container_width=True):
                    st.session_state.selected_level = 1;
                    st.session_state.selected_workout = None;
                    st.session_state.selected_workout_day = None;
                    save_user_data();
                    st.rerun()
            with cols[1]:
                if st.button("Level 2", use_container_width=True):
                    st.session_state.selected_level = 2;
                    st.session_state.selected_workout = None;
                    st.session_state.selected_workout_day = None;
                    save_user_data();
                    st.rerun()
            with cols[2]:
                st.info(f"**Current: Level {st.session_state.selected_level}**")

            weekly_schedule(st.session_state.selected_level)

            level = st.session_state.selected_level
            if st.session_state.get('selected_workout'):
                workout_label = st.session_state.selected_workout
                the_day = st.session_state.get('selected_workout_day', 'Selected')
                st.subheader(f"**{the_day}: {workout_label}** (Level {level})");
                workout_badge(workout_label)
                if st.button("üîÑ Return to Today's Workout"):
                    st.session_state.selected_workout = None;
                    st.session_state.selected_workout_day = None;
                    st.rerun()
            else:
                today = current_day_name()
                workout_label = get_schedule(level).get(today, "REST")
                st.subheader(f"**Today ({today}): {workout_label}** (Level {level})");
                workout_badge(workout_label)

            workout_date = date.today().isoformat()
            exercises = get_exercises_for_day(level, st.session_state.get('selected_workout_day', current_day_name()),
                                              picked_label=workout_label)

            grouped = {}
            for ex in exercises: grouped.setdefault(ex.get("category", "General"), []).append(ex)
            for cat, items in grouped.items():
                if len(grouped) > 1: st.markdown(f'<div class="category-header">{cat}</div>', unsafe_allow_html=True)
                for i, ex in enumerate(items, start=1): render_exercise_card(ex, i, workout_label, workout_date)

            # Summary
            total_ex = len(exercises);
            total_sets_all = 0;
            completed_sets_all = 0;
            completed_exercises = 0
            for ex in exercises:
                name = ex["name"];
                ex_key = exercise_key(workout_label, name, workout_date)
                if "submoves" in ex:
                    sub_total = len(ex["submoves"]);
                    sub_done = 0
                    for i, sub in enumerate(ex["submoves"], start=1):
                        if submove_key(ex_key, sub["name"], i) in st.session_state.completed_exercises: sub_done += 1
                    total_sets_all += sub_total;
                    completed_sets_all += sub_done
                    if sub_total > 0 and sub_done == sub_total: completed_exercises += 1
                else:
                    t = parse_set_count(ex.get("sets", "‚Äî"));
                    total_sets_all += t;
                    done = 0
                    for s in range(1, t + 1):
                        if f"{ex_key}_set_{s}" in st.session_state.completed_exercises: done += 1
                    completed_sets_all += done
                    if t > 0 and done == t: completed_exercises += 1
                    if t == 0 and f"{ex_key}_simple" in st.session_state.completed_exercises: completed_exercises += 1
            if total_ex > 0:
                ex_pct = (completed_exercises / total_ex) * 100
                set_pct = (completed_sets_all / total_sets_all) * 100 if total_sets_all > 0 else 0
                st.markdown(f"""
                <div class="workout-summary">
                  <h4 style="margin-top:0;">Workout Progress Summary</h4>
                  <p><b>Exercises Completed:</b> {completed_exercises}/{total_ex} ({ex_pct:.1f}%)</p>
                  <p><b>Total Sets Completed:</b> {completed_sets_all}/{total_sets_all} ({set_pct:.1f}%)</p>
                </div>
                """, unsafe_allow_html=True)

        # -----------------------------
        # Meal Plan Sample ‚Äî Weekly plans + Daily Intake Guide + Education
        # -----------------------------
        WEEKLY_MEALS = {
            "Option A: Omnivore": {
                "Mon": ["Greek yogurt + berries + oats",
                        "Chicken, rice & broccoli",
                        "Salmon, sweet potato, asparagus"],
                "Tue": ["Omelet + toast + fruit",
                        "Turkey wrap + mixed greens",
                        "Beef stir-fry + jasmine rice"],
                "Wed": ["Protein smoothie (whey) + banana + PB",
                        "Chicken fajita bowl",
                        "Shrimp tacos + slaw"],
                "Thu": ["Overnight oats + chia + berries",
                        "Sushi bowl (salmon, rice, edamame)",
                        "Lean beef chili + quinoa"],
                "Fri": ["Eggs + avocado toast",
                        "Grilled chicken Caesar (light dressing)",
                        "Baked cod + potatoes + green beans"],
                "Sat": ["Protein pancakes + fruit",
                        "Turkey burger (whole-grain bun) + salad",
                        "Steak + rice + vegetables"],
                "Sun": ["Cottage cheese + pineapple + granola",
                        "Chicken pesto pasta + veggies",
                        "Roast chicken + couscous + salad"]
            },
            "Option B: Pescatarian": {
                "Mon": ["Greek yogurt + berries + oats",
                        "Tuna salad wrap + greens",
                        "Salmon, sweet potato, asparagus"],
                "Tue": ["Tofu scramble + toast",
                        "Shrimp quinoa bowl",
                        "Baked cod + potatoes + broccoli"],
                "Wed": ["Protein smoothie (whey/pea) + banana",
                        "Sushi bowl (salmon, seaweed, rice)",
                        "Garlic shrimp pasta + side salad"],
                "Thu": ["Overnight oats + chia",
                        "Miso salmon + rice + bok choy",
                        "Veggie chili + avocado toast"],
                "Fri": ["Eggs + avocado toast",
                        "Mediterranean tuna pasta",
                        "Seared tuna + rice + edamame"],
                "Sat": ["Protein pancakes + fruit",
                        "Grilled shrimp tacos + slaw",
                        "Baked halibut + quinoa + veg"],
                "Sun": ["Cottage cheese + fruit",
                        "Smoked salmon bagel (light)",
                        "Shrimp stir-fry + brown rice"]
            },
            "Option C: Vegan": {
                "Mon": ["Tofu scramble + whole-grain toast + fruit",
                        "Lentil quinoa bowl + veggies",
                        "Tempeh stir-fry + rice"],
                "Tue": ["Overnight oats + chia + berries",
                        "Chickpea wrap + greens",
                        "Black bean pasta + broccoli"],
                "Wed": ["Pea-protein smoothie + banana + PB",
                        "Buddha bowl (tofu, edamame, rice, veg)",
                        "Lentil curry + basmati rice"],
                "Thu": ["Buckwheat pancakes + fruit",
                        "Hummus + falafel bowl + tabbouleh",
                        "Tofu poke bowl"],
                "Fri": ["Tofu scramble burrito",
                        "Pea-protein pasta + marinara + veg",
                        "Tempeh fajitas + tortillas"],
                "Sat": ["Oatmeal + seeds + berries",
                        "Chickpea quinoa bowl",
                        "Tofu steak + potatoes + veg"],
                "Sun": ["Soy yogurt + granola + fruit",
                        "Vegan sushi + edamame",
                        "Lentil bolognese + pasta"]
            }
        }

        # Example-food guides (from your screenshots) for target grams per meal
        CARB_CHOICES_67g = ["Apple ~2‚Öî pcs (‚âà556 g)", "Sweet potato ~1¬Ω serving (‚âà216 g)",
                            "Banana ~2‚Öî pcs (‚âà319 g)", "Brown rice ~1 serving (‚âà204 g)",
                            "Oatmeal ~1 serving (‚âà97 g)", "Grapefruit 3 pcs (‚âà886 g)",
                            "Whole wheat bread ~1‚Öî serving (‚âà118 g)"]
        PRO_CHOICES_40g = ["Salmon ~4 servings (‚âà197 g)", "Chicken breast ~1‚Öî serving (‚âà175 g)",
                           "Egg ~6¬Ω servings (‚âà323 g)", "Beef rump ~1 serving (‚âà192 g)",
                           "Pork tenderloin ~1¬Ω serving (‚âà288 g)", "Pea/soy protein scoop per label"]
        FAT_CHOICES_16g = ["Almond ~1 serving (29 g)", "Olive oil ~3‚Öì tsp (16 g)",
                           "Avocado ~1 piece (86 g)", "Cheese ~3¬Ω servings (70 g)"]

        def render_weekly_meal_plans():
            st.subheader("Weekly Meal Plans")
            choice = st.selectbox("Select your plan:", list(WEEKLY_MEALS.keys()))
            plan = WEEKLY_MEALS[choice]
            df = pd.DataFrame(plan).T
            df.columns = ["Breakfast", "Lunch", "Dinner"]
            st.dataframe(df, use_container_width=True)

            st.markdown("**Vegan ‚Äî Grow Your Glutes (quick tips):**")
            st.markdown("""
            - Prioritize **protein** each meal (tofu, tempeh, seitan, edamame, beans, pea/soy protein powders).  
            - Hit **progressive overload** on glute movements (hip thrusts, RDLs, Bulgarians) and **eat enough** total calories.  
            - **Creatine monohydrate 3‚Äì5 g/day** can support higher-quality training and lean mass. Take daily; consistency matters.  
            - Drink plenty of **water** (aim ~2‚Äì3+ L/day, more if training hard) and avoid **crash diets**.
            """)

            with st.expander("Why creatine and why not crash diets? (sources)"):
                st.markdown("""
        - ISSN Position Stand: Creatine is safe and effective for performance and lean mass.  
          https://jissn.biomedcentral.com/articles/10.1186/s12970-017-0173-z  
        - Crash diets increase **lean mass** losses and can reduce metabolic rate; slow, protein-sufficient loss is safer.  
          https://www.health.harvard.edu/staying-healthy/why-crash-diets-are-a-bad-idea
                """)

        def render_daily_intake_guide():
            st.subheader("Daily Intake Guide (per-meal targets like your screenshots)")
            c1, c2, c3 = st.columns(3)
            with c1:
                daily_kcal = st.number_input("Daily calorie target (kcal)", min_value=1000, max_value=4000, value=1730,
                                             step=10)
                meals = st.slider("Meals per day", 2, 6, 3)
            with c2:
                carbs_g = st.number_input("Carbs / meal (g)", min_value=0, max_value=250, value=67)
                protein_g = st.number_input("Protein / meal (g)", min_value=0, max_value=150, value=40)
            with c3:
                fat_g = st.number_input("Fat / meal (g)", min_value=0, max_value=100, value=16)
            per_meal_kcal = round(daily_kcal / meals)
            st.info(
                f"**Per meal:** ~{per_meal_kcal} kcal  |  {carbs_g} g carbs  |  {protein_g} g protein  |  {fat_g} g fat")

            st.markdown("**What if you want to consume these per-meal targets? Try one of these:**")
            colA, colB, colC = st.columns(3)
            with colA:
                st.markdown("**Carbohydrates ~ target grams**")
                for item in CARB_CHOICES_67g: st.markdown(f"- {item}")
            with colB:
                st.markdown("**Protein ~ target grams**")
                for item in PRO_CHOICES_40g: st.markdown(f"- {item}")
            with colC:
                st.markdown("**Fat ~ target grams**")
                for item in FAT_CHOICES_16g: st.markdown(f"- {item}")

            with st.expander("Education: Lean body mass vs. muscle mass (sources)"):
                st.markdown("""
        - **Lean Body Mass (LBM)** = your **total body weight minus fat** (also called *fat-free mass*). It includes muscle, bone, organs, and water.  
          https://en.wikipedia.org/wiki/Lean_body_mass  
        - **Muscle mass**: when people say "gain muscle", they mean **skeletal muscle mass** (the only type you can grow with training/nutrition to build your glutes).  
          https://en.wikipedia.org/wiki/Skeletal_muscle
                """)

        def render_meal_plan_sample_tab():
            render_weekly_meal_plans()
            st.markdown("---")
            render_daily_intake_guide()

        # -----------------------------
        # Weight Tracker (weight, water, energy balance)
        # -----------------------------
        def render_weight_tracker_tab():
            st.markdown("### Daily Check-ins: Weight ‚Ä¢ Water ‚Ä¢ Energy Balance")

            with st.expander("Add Today's Entry"):
                c1, c2, c3 = st.columns(3)
                with c1:
                    weight = st.number_input("Weight (lb)", min_value=70.0, max_value=400.0, value=150.0, step=0.2)
                    water_l = st.number_input("Water (liters)", min_value=0.0, max_value=10.0, value=2.5, step=0.1)
                with c2:
                    kcal_in = st.number_input("Calories IN (food)", min_value=0, max_value=8000, value=1700, step=50)
                    kcal_out = st.number_input("Calories OUT (exercise est.)", min_value=0, max_value=5000, value=500,
                                               step=25)
                with c3:
                    energy_feel = st.slider("Energy level (1‚Äì10)", 1, 10, 7)
                    waist = st.number_input("Waist (in)", min_value=20.0, max_value=70.0, value=30.0, step=0.25)
                    hips = st.number_input("Hips (in)", min_value=25.0, max_value=80.0, value=36.0, step=0.25)
                notes = st.text_area("Notes (optional)", placeholder="Sleep, soreness, cravings, etc.")
                photo = st.file_uploader("Progress photo (optional)", type=["png", "jpg", "jpeg"], key="prog_photo")
                if st.button("Save Today"):
                    entry = {
                        "date": date.today().isoformat(),
                        "weight": float(weight),
                        "water_l": float(water_l),
                        "kcal_in": int(kcal_in),
                        "kcal_out": int(kcal_out),
                        "kcal_balance": int(kcal_in) - int(kcal_out),
                        "energy_level": int(energy_feel),
                        "waist": float(waist),
                        "hips": float(hips),
                        "waist_hip_ratio": round(float(waist) / float(hips), 3) if hips else None,
                        "notes": notes or "",
                        "photo_path": None
                    }
                    if photo: entry["photo_path"] = save_progress_photo(photo, "update")
                    st.session_state.progress_entries.append(entry);
                    save_user_data()
                    st.success("Entry saved!");
                    st.rerun()

            if st.session_state.progress_entries:
                st.markdown("#### Recent Entries")
                recent = sorted(st.session_state.progress_entries, key=lambda x: x['date'], reverse=True)[:10]
                for e in recent:
                    st.markdown(f"""
                    <div class="progress-card">
                      <h4 style="margin:0 0 6px 0;">{e['date']}</h4>
                      <div style="display:grid;grid-template-columns:repeat(4,1fr);gap:8px;">
                        <div><b>Weight:</b> {e['weight']} lb</div>
                        <div><b>Water:</b> {e['water_l']} L</div>
                        <div><b>Energy:</b> {e['energy_level']}/10</div>
                        <div><b>Energy Balance:</b> {e['kcal_balance']} kcal</div>
                      </div>
                      <div style="display:grid;grid-template-columns:repeat(3,1fr);gap:8px;margin-top:6px;">
                        <div><b>Waist:</b> {e['waist']}"</div>
                        <div><b>Hips:</b> {e['hips']}"</div>
                        <div><b>W/H Ratio:</b> {e['waist_hip_ratio']}</div>
                      </div>
                      {"<p><b>Notes:</b> " + e['notes'] + "</p>" if e.get('notes') else ""}
                    </div>
                    """, unsafe_allow_html=True)
                    if e.get('photo_path') and os.path.exists(e['photo_path']):
                        st.image(e['photo_path'], caption=f"Progress photo ‚Äî {e['date']}", width=280)

                # Quick tables
                df = pd.DataFrame(sorted(st.session_state.progress_entries, key=lambda x: x['date']))
                st.markdown("#### Trend Tables")
                st.dataframe(df[['date', 'weight', 'water_l', 'kcal_in', 'kcal_out', 'kcal_balance', 'energy_level']],
                             use_container_width=True)

        # -----------------------------
        # Sidebar
        # -----------------------------
        def sidebar_controls():
            with st.sidebar:
                st.header("Settings")
                st.info(f"Current Training Level: {st.session_state.selected_level}")
                st.markdown("---")
                if st.button("Save Progress File"):
                    save_user_data();
                    st.success("Saved!")
                st.markdown("### Media")
                st.caption(f"Upload exercise videos inside each exercise card (max {MAX_VIDEO_MB} MB per file).")
                if os.path.exists(EXERCISE_VIDEOS_DIR):
                    vids = [f for f in os.listdir(EXERCISE_VIDEOS_DIR) if
                            f.lower().endswith(('.mp4', '.mov', '.avi', '.webm'))]
                    st.write(f"Uploaded videos: **{len(vids)}**")
                st.markdown("---")
                st.markdown("### Danger Zone")
                if st.button("Clear All Data"):
                    st.warning("This will delete saved progress and uploaded media.")
                if st.checkbox("Confirm deletion"):
                    st.session_state.completed_exercises = [];
                    st.session_state.progress_entries = []
                    st.session_state.selected_workout = None;
                    st.session_state.selected_workout_day = None
                    if os.path.exists(UPLOAD_ROOT): shutil.rmtree(UPLOAD_ROOT)
                    if os.path.exists(USER_DATA_DIR): shutil.rmtree(USER_DATA_DIR)
                    ensure_dirs();
                    st.success("All data cleared.");
                    st.rerun()

        # -----------------------------
        # Main
        # -----------------------------
        def main():
            ensure_dirs()
            render_hero()
            sidebar_controls()

            # Home button
            render_home_button()

            # Check current page state
            current_page = st.session_state.get('current_page', 'Home')

            # Navigation tabs with additional pages
            tab_names = ["üè† Home", "üìñ Progressive Overload", "üéØ Workout Overview", "üèãÔ∏è Program", "üçΩÔ∏è Meal Plan Sample",
                         "üìà Weight Tracker"]
            tabs = st.tabs(tab_names)

            with tabs[0]:  # Home
                if st.button("Set as Home Page", key="set_home"):
                    st.session_state.current_page = 'Home'
                    save_user_data()
                render_home_page()

            with tabs[1]:  # Progressive Overload
                if st.button("Go to Progressive Overload", key="set_progressive"):
                    st.session_state.current_page = 'Progressive Overload'
                    save_user_data()
                render_progressive_overload()

            with tabs[2]:  # Workout Overview
                if st.button("Go to Workout Overview", key="set_overview"):
                    st.session_state.current_page = 'Workout Overview'
                    save_user_data()
                render_workout_overview()

            with tabs[3]:  # Program
                if st.button("Go to Program", key="set_program"):
                    st.session_state.current_page = 'Program'
                    save_user_data()
                render_workout()

            with tabs[4]:  # Meal Plan Sample
                if st.button("Go to Meal Plan Sample", key="set_meals"):
                    st.session_state.current_page = 'Meal Plan Sample'
                    save_user_data()
                render_meal_plan_sample_tab()

            with tabs[5]:  # Weight Tracker
                if st.button("Go to Weight Tracker", key="set_tracker"):
                    st.session_state.current_page = 'Weight Tracker'
                    save_user_data()
                render_weight_tracker_tab()

        if __name__ == "__main__":
            main()  # streamlit_app.py
        # Hourglass Workout Program by Joane Aristilde ‚Äî PDF-accurate Streamlit app
        # Adds: per-exercise video uploads (size-limited), Booty A/B (L2) variation,
        # 1-week meal plan selector (Omni / Pescatarian / Vegan), Daily Intake Guide,
        # Vegan "grow your glutes" notes incl. creatine & hydration guidance,
        # upgraded progress tracker (weight, water, energy balance).
        # Facts include short citations with URLs (see Education section).

        import streamlit as st
        import pandas as pd
        import os, json, shutil, re
        from datetime import datetime, date
        from PIL import Image

        # -----------------------------
        # Page & constants
        # -----------------------------
        st.set_page_config(page_title="Hourglass Fitness Program by Joane Aristilde",
                           page_icon="üèãÔ∏è‚Äç‚ôÄÔ∏è", layout="wide")

        MAX_VIDEO_MB = 50  # limit per video upload
        UPLOAD_ROOT = "uploaded_content"
        MAIN_MEDIA_DIR = os.path.join(UPLOAD_ROOT, "main_media")
        EXERCISE_VIDEOS_DIR = os.path.join(UPLOAD_ROOT, "exercise_videos")
        PROGRESS_DIR = os.path.join(UPLOAD_ROOT, "progress_photos")
        USER_DATA_DIR = "user_data"

        # -----------------------------
        # Styles
        # -----------------------------
        st.markdown("""
        <style>
            .main { background: linear-gradient(135deg, #ffeef8 0%, #fff5f8 50%, #f0f8ff 100%); }
            .main-header {
                font-size: 3rem; font-weight: 800; text-align: center;
                background: linear-gradient(45deg, #FF1493, #FF69B4, #DA70D6);
                -webkit-background-clip: text; -webkit-text-fill-color: transparent;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.1); margin-bottom: .5rem;
            }
            .sub-header { font-size: 1.1rem; text-align: center; color: #666; margin-bottom: 1rem; font-weight: 300; }
            .hero-section {
                text-align: center; padding: 1.2rem .8rem;
                background: linear-gradient(135deg, rgba(255,20,147,.15), rgba(255,105,180,.15), rgba(218,112,214,.15));
                border-radius: 18px; margin-bottom: 10px; backdrop-filter: blur(10px);
                box-shadow: 0 8px 32px rgba(0,0,0,.08); border: 1px solid rgba(255,255,255,.35);
            }
            .weekly-box { background: rgba(255,255,255,.96); padding: 12px; border-radius: 14px;
                margin: 8px 0 14px 0; box-shadow: 0 4px 15px rgba(0,0,0,.08); border-left: 5px solid #FF1493; }
            .category-header { background: linear-gradient(45deg,#FF69B4,#DA70D6); color:#fff;
                padding: 10px; border-radius: 10px; text-align:center; font-weight:700; margin: 12px 0 8px 0; }
            .exercise-card { background: rgba(255,255,255,.98); padding: 12px; border-radius: 12px;
                box-shadow: 0 4px 15px rgba(0,0,0,.08); margin: 8px 0; border-left: 5px solid #FF1493; }
            .completed-card { background: rgba(232,245,232,.95); border-left: 5px solid #4CAF50; }
            .video-section { background: rgba(240,248,255,.95); padding: 8px; border-radius: 8px; border: 2px solid #4169E1; }
            .workout-summary { background: rgba(255,248,220,.95); padding: 12px; border-radius: 12px; border-left: 5px solid #FFD700; margin: 12px 0; }
            .meal-item { background: rgba(240,248,255,.95); padding: 10px; border-radius: 10px; margin: 8px 0; border-left: 4px solid #4169E1; }
            .progress-card { background: rgba(255,240,245,.95); padding: 12px; border-radius: 12px; border-left: 5px solid #FF69B4; margin: 8px 0; }
            .badge { display:inline-block;padding:6px 10px;border-radius:12px;color:#fff;font-weight:700;margin:6px 0; }
            .info-section {
                background: rgba(255,255,255,.96); padding: 16px; border-radius: 14px;
                margin: 12px 0; box-shadow: 0 4px 15px rgba(0,0,0,.08); 
                border-left: 5px solid #20B2AA;
            }
            .home-button {
                background: linear-gradient(45deg, #FF1493, #FF69B4);
                color: white; padding: 8px 16px; border-radius: 20px;
                border: none; font-weight: bold; margin: 4px;
            }
        </style>
        """, unsafe_allow_html=True)

        # -----------------------------
        # Utilities
        # -----------------------------
        def ensure_dirs():
            for d in [UPLOAD_ROOT, MAIN_MEDIA_DIR, EXERCISE_VIDEOS_DIR, PROGRESS_DIR, USER_DATA_DIR]:
                os.makedirs(d, exist_ok=True)

        def _timestamp_name(prefix, original_name):
            ext = original_name.split(".")[-1].lower()
            ts = datetime.now().strftime("%Y%m%d_%H%M%S")
            return f"{prefix}_{ts}.{ext}"

        def _latest(directory, prefix):
            if not os.path.exists(directory): return None
            matches = [os.path.join(directory, f) for f in os.listdir(directory) if f.startswith(prefix)]
            return max(matches, key=os.path.getmtime) if matches else None

        def parse_set_count(sets_string):
            """
            Count checkable sets:
            - Include AMRAP sets in the count
            - Exclude warm-up sets
            - If '1 set each' => 1 (finishers have sub-moves tracked separately)
            - '‚Äî' => 0
            """
            if not sets_string or sets_string.strip() == "‚Äî":
                return 0
            s = sets_string.lower()
            cleaned = re.sub(r'\d+\s*warm[- ]*up.*?(?:\+|$)', '', s)
            nums = re.findall(r'\d+', cleaned)
            if not nums:
                return 1 if "set each" in s else 0
            return sum(int(n) for n in nums)

        def save_progress_photo(uploaded_file, photo_type):
            ensure_dirs()
            filename = _timestamp_name(f"progress_{photo_type}", uploaded_file.name)
            path = os.path.join(PROGRESS_DIR, filename)
            with open(path, "wb") as f: f.write(uploaded_file.getbuffer())
            return path

        def save_exercise_video(uploaded_file, key_slug):
            """Save per-exercise demo video with size cap."""
            ensure_dirs()
            size_mb = len(uploaded_file.getbuffer()) / (1024 * 1024)
            if size_mb > MAX_VIDEO_MB:
                st.error(f"Video too large: {size_mb:.1f} MB (limit {MAX_VIDEO_MB} MB). Please upload a smaller file.")
                return None
            safe_key = re.sub(r'[^a-z0-9_]+', '_', key_slug.lower())
            filename = _timestamp_name(f"exercise_{safe_key}", uploaded_file.name)
            path = os.path.join(EXERCISE_VIDEOS_DIR, filename)
            with open(path, "wb") as f: f.write(uploaded_file.getbuffer())
            return path

        def find_exercise_video(key_slug):
            ensure_dirs()
            safe_key = re.sub(r'[^a-z0-9_]+', '_', key_slug.lower())
            candidates = [os.path.join(EXERCISE_VIDEOS_DIR, f) for f in os.listdir(EXERCISE_VIDEOS_DIR) if
                          safe_key in f.lower()]
            return max(candidates, key=os.path.getmtime) if candidates else None

        def save_user_data():
            ensure_dirs()
            data = {
                'completed_exercises': st.session_state.get('completed_exercises', []),
                'selected_level': st.session_state.get('selected_level', 1),
                'progress_entries': st.session_state.get('progress_entries', []),
                'selected_workout': st.session_state.get('selected_workout', None),
                'selected_workout_day': st.session_state.get('selected_workout_day', None),
                'current_page': st.session_state.get('current_page', 'Home'),
                'last_updated': datetime.now().isoformat()
            }
            with open(os.path.join(USER_DATA_DIR, 'user_progress.json'), 'w') as f:
                json.dump(data, f, indent=2)

        def load_user_data():
            try:
                with open(os.path.join(USER_DATA_DIR, 'user_progress.json'), 'r') as f:
                    data = json.load(f)
                for k, v in data.items():
                    if k != 'last_updated': st.session_state[k] = v
                return True
            except FileNotFoundError:
                return False

        def workout_badge(label):
            colors = {
                "BOOTY": "#FF69B4", "BOOTY A": "#FF69B4", "BOOTY B": "#FF69B4",
                "LEGS & BOOTY": "#8A2BE2", "ABS/CORE & CARDIO": "#1E90FF",
                "ABS/CORE ONLY (you can do at home)": "#1E90FF",
                "LIGHT SHOULDERS & BACK": "#20B2AA", "SHOULDERS & ABS/CORE": "#20B2AA",
                "REST": "#28a745"
            }
            color = colors.get(label, "#555")
            st.markdown(f"<div class='badge' style='background:{color};'>{label}</div>", unsafe_allow_html=True)

        # -----------------------------
        # PDF-accurate program (names, sets, reps, stairmaster)
        # -----------------------------
        PROGRAM_SPLIT = {
            "Level 1": {
                "Monday": "BOOTY",
                "Tuesday": "ABS/CORE & CARDIO",
                "Wednesday": "REST",
                "Thursday": "LEGS & BOOTY",
                "Friday": "ABS/CORE ONLY (you can do at home)",
                "Saturday": "LIGHT SHOULDERS & BACK",
                "Sunday": "REST"
            },
            "Level 2": {
                "Monday": "BOOTY A",  # L2 has two distinct booty days
                "Tuesday": "LIGHT SHOULDERS & BACK",
                "Wednesday": "ABS/CORE & CARDIO",
                "Thursday": "BOOTY B",
                "Friday": "SHOULDERS & ABS/CORE",
                "Saturday": "LEGS & BOOTY",
                "Sunday": "REST"
            }
        }

        def warmup_item():
            return {"name": "Booty/ Leg Activation", "sets": "‚Äî", "reps": "5 min", "category": "Warm-up"}

        def stretching_item():
            return {"name": "Stretching", "sets": "‚Äî", "reps": "5 min", "category": "Recovery"}

        # Updated stairmaster workouts (replacing treadmill)
        def stairmaster_L1():
            return {"name": "Stairmaster Workout", "sets": "‚Äî", "reps": "30 min: fat loss levels 8-10",
                    "category": "Cardio"}

        def stairmaster_L2():
            return {"name": "Stairmaster Workout", "sets": "‚Äî", "reps": "30 min: fat loss levels 8-10",
                    "category": "Cardio"}

        def stairmaster_booty_warmup():
            return {"name": "Stairmaster Warm-up", "sets": "‚Äî", "reps": "20 min: levels 5-6 (booty day warm-up)",
                    "category": "Warm-up"}

        KICKBACKS = {"name": "Kickbacks", "sets": "1 warm up set + 3 (each side)",
                     "reps": "10-12 reps; 12-15 reps (last set)", "category": "Booty"}
        HIP_THRUST = {"name": "Hip Thrust", "sets": "1 warm up set + 3 + 1 AMRAP",
                      "reps": "10-12 reps; 8 reps (last set); AMRAP ~20% avg weight", "category": "Booty"}
        HYPEREXT = {"name": "Hyperextensions", "sets": "(1 warm up set) + 3 + 1 AMRAP (no weight)",
                    "reps": "10-12 reps; 10s hold on last rep each set", "category": "Booty"}
        RDLS = {"name": "RDLs (Romanian Deadlifts)", "sets": "1 warm up set + 3",
                "reps": "10-12 reps; 8 reps (last set)", "category": "Booty"}
        ABDUCTORS = {"name": "Abductors", "sets": "(1 warm up set) + 3", "reps": "10-12 reps; 12-15 reps (last set)",
                     "category": "Booty"}
        BULGARIAN = {"name": "Bulgarian Split Squats", "sets": "1 warm up set + 3 (each side) + 1 AMRAP (no weight)",
                     "reps": "10-12 reps; 8 reps (last set)", "category": "Legs"}
        LEG_CURL = {"name": "Leg Curl", "sets": "(1 warm up set) + 3", "reps": "10-12 reps; 12-15 reps (last set)",
                    "category": "Legs"}
        LEG_PRESS = {"name": "Leg Press", "sets": "1 warm up set + 3", "reps": "10-12 reps; 8-10 reps (last set)",
                     "category": "Legs"}

        LEG_FINISHER = {
            "name": "Leg Finisher (light weight)", "sets": "1 set each",
            "reps": "Single Leg Hip Thrust 15-20 reps, Sumo Squats 15-20 reps, Squat Jumps 10-12 reps",
            "category": "Booty",
            "submoves": [
                {"name": "Single Leg Hip Thrust", "sets": "1", "reps": "15-20 reps"},
                {"name": "Sumo Squats", "sets": "1", "reps": "15-20 reps"},
                {"name": "Squat Jumps", "sets": "1", "reps": "10-12 reps"}
            ]
        }
        BOOTY_FINISHER_B = {
            "name": "Leg Finisher (light weight) ‚Äî Focus Sumo + Jumps", "sets": "1 set each",
            "reps": "Sumo Squats 15-20 reps, Squat Jumps 10-12 reps, Single Leg Hip Thrust 15-20 reps",
            "category": "Booty", "submoves": [
                {"name": "Sumo Squats", "sets": "1", "reps": "15-20 reps"},
                {"name": "Squat Jumps", "sets": "1", "reps": "10-12 reps"},
                {"name": "Single Leg Hip Thrust", "sets": "1", "reps": "15-20 reps"}
            ]
        }

        # Updated day templates with stairmaster and booty warmups
        BOOTY_L1 = [stairmaster_booty_warmup(), warmup_item(), KICKBACKS, HIP_THRUST, HYPEREXT, RDLS, stairmaster_L1(),
                    stretching_item()]
        BOOTY_L2_CORE = [stairmaster_booty_warmup(), warmup_item(), KICKBACKS, HIP_THRUST, HYPEREXT, RDLS, ABDUCTORS]
        BOOTY_L2_A = BOOTY_L2_CORE + [LEG_FINISHER, stretching_item()]
        BOOTY_L2_B = BOOTY_L2_CORE + [BOOTY_FINISHER_B, stretching_item()]
        LEGS_BOOTY_L1 = [warmup_item(), HIP_THRUST, HYPEREXT, BULGARIAN, LEG_CURL, stairmaster_L1(), stretching_item()]
        LEGS_BOOTY_L2 = [warmup_item(), HIP_THRUST, HYPEREXT, BULGARIAN, LEG_PRESS, LEG_CURL, stairmaster_L2(),
                         stretching_item()]

        # Light Shoulders & Back
        LSB_L1 = [
            {"name": "Warm Up Mobility", "sets": "‚Äî", "reps": "5 min", "category": "Warm-up"},
            {"name": "Lat Pulldown Wide Grip", "sets": "1 warm up set + 3", "reps": "10-12 reps; 8-10 reps (last set)",
             "category": "Back"},
            {"name": "Close Grip Rows", "sets": "3", "reps": "8-10 reps", "category": "Back"},
            {"name": "Db Lateral Raises", "sets": "1 warm up set + 3", "reps": "10-12 reps", "category": "Shoulders"},
            {"name": "Db Shoulder Press", "sets": "1 warm up set + 3", "reps": "10-12 reps", "category": "Shoulders"},
            {"name": "Face Pulls", "sets": "3", "reps": "12-15 reps", "category": "Shoulders"}
        ]
        LSB_L2 = [
            {"name": "Warm Up Mobility", "sets": "‚Äî", "reps": "5 min", "category": "Warm-up"},
            {"name": "Lat Pulldown Wide Grip", "sets": "1 warm up set + 3", "reps": "10-12 reps; 8-10 reps (last set)",
             "category": "Back"},
            {"name": "Lat Pulldown Close Grip", "sets": "3", "reps": "8-10 reps", "category": "Back"},
            {"name": "Wide Grip Rows", "sets": "3", "reps": "8-10 reps", "category": "Back"},
            {"name": "Close Grip Rows", "sets": "3", "reps": "8-10 reps", "category": "Back"},
            {"name": "Db Single Arm Rows", "sets": "3 (each side)", "reps": "10-12 reps", "category": "Back"},
            {"name": "Face Pulls", "sets": "3", "reps": "12-15 reps", "category": "Shoulders"}
        ]

        # Shoulders & Abs/Core (single list per PDF)
        SH_ABS = [
            {"name": "Warm Up Mobility", "sets": "‚Äî", "reps": "5 min", "category": "Warm-up"},
            {"name": "Db Lateral Raises", "sets": "3", "reps": "10-12 reps", "category": "Shoulders"},
            {"name": "Db Bent Over Lateral Raises", "sets": "3", "reps": "10-12 reps", "category": "Shoulders"},
            {"name": "Db Shoulder Press", "sets": "1 warm up set + 3", "reps": "10-12 reps", "category": "Shoulders"},
            {"name": "Db Front Raises", "sets": "3", "reps": "10-12 reps", "category": "Shoulders"},
            {"name": "Gorilla Rows", "sets": "3", "reps": "10-12 reps", "category": "Back"},
            {"name": "Face Pulls", "sets": "3", "reps": "12-15 reps", "category": "Shoulders"},
            # Abs/Core circuit (repeat 2x)
            {"name": "Plank", "sets": "1", "reps": "1 min", "category": "Core"},
            {"name": "Reverse Plank", "sets": "1", "reps": "1 min", "category": "Core"},
            {"name": "Reverse Plank Knee Tucks", "sets": "1", "reps": "30 sec", "category": "Core"},
            {"name": "Reverse Plank Dips", "sets": "1", "reps": "30 sec", "category": "Core"},
            {"name": "Leg Bridge Knee Tucks", "sets": "1", "reps": "30 sec", "category": "Core"},
            {"name": "Frog Crunches", "sets": "1", "reps": "30 sec", "category": "Core"},
            {"name": "Butterfly Kicks", "sets": "1", "reps": "30 sec", "category": "Core"},
            {"name": "Half Leg Raises", "sets": "1", "reps": "30 sec", "category": "Core"},
            {"name": "Dead Bugs", "sets": "1", "reps": "30 sec", "category": "Core"},
            {"name": "Superman hold", "sets": "1", "reps": "30 sec", "category": "Core"},
            {"name": "Repeat abs & core 2x", "sets": "‚Äî", "reps": "Complete the circuit twice", "category": "Core"},
        ]

        ABS_CORE_CIRCUIT = [
            {"name": "Plank", "sets": "1", "reps": "1 min", "category": "Core"},
            {"name": "High Plank", "sets": "1", "reps": "1 min", "category": "Core"},
            {"name": "High Plank Leg Lifts", "sets": "1", "reps": "30 sec", "category": "Core"},
            {"name": "Plank Knee Taps", "sets": "1", "reps": "30 sec", "category": "Core"},
            {"name": "Superman Hold", "sets": "1", "reps": "30 sec", "category": "Core"},
            {"name": "Reverse Plank", "sets": "1", "reps": "1 min", "category": "Core"},
            {"name": "Reverse Plank Knee Tucks", "sets": "1", "reps": "30 sec", "category": "Core"},
            {"name": "Reverse Plank Dips", "sets": "1", "reps": "30 sec", "category": "Core"},
            {"name": "Glute Bridge Marches", "sets": "1", "reps": "30 sec", "category": "Core"},
            {"name": "Single Leg Bridge Hold", "sets": "1", "reps": "30 sec (each side)", "category": "Core"},
            {"name": "Leg Bridge Knee Tucks", "sets": "1", "reps": "30 sec", "category": "Core"},
            {"name": "Around The Worlds", "sets": "1", "reps": "30 sec (each side)", "category": "Core"},
            {"name": "Repeat abs & core 2x", "sets": "‚Äî", "reps": "Complete the circuit twice", "category": "Core"},
        ]
        ABS_CORE_ONLY = [
            {"name": "Plank", "sets": "1", "reps": "1 min", "category": "Core"},
            {"name": "Plank Knee Taps", "sets": "1", "reps": "30 sec", "category": "Core"},
            {"name": "Reverse Plank", "sets": "1", "reps": "1 min", "category": "Core"},
            {"name": "Reverse Plank Knee Tucks", "sets": "1", "reps": "30 sec", "category": "Core"},
            {"name": "Reverse Plank Dips", "sets": "1", "reps": "30 sec", "category": "Core"},
            {"name": "Glute Bridge Marches", "sets": "1", "reps": "30 sec", "category": "Core"},
            {"name": "Single Leg Bridge Hold", "sets": "1", "reps": "30 sec (each side)", "category": "Core"},
            {"name": "Leg Bridge Knee Tucks", "sets": "1", "reps": "30 sec", "category": "Core"},
            {"name": "Butterfly Kicks", "sets": "1", "reps": "30 sec", "category": "Core"},
            {"name": "Half Leg Raises", "sets": "1", "reps": "30 sec", "category": "Core"},
            {"name": "Dead Bugs", "sets": "1", "reps": "30 sec", "category": "Core"},
            {"name": "Frog Crunches", "sets": "1", "reps": "30 sec", "category": "Core"},
            {"name": "Around The Worlds", "sets": "1", "reps": "30 sec (each side)", "category": "Core"},
            {"name": "Repeat 2x total", "sets": "‚Äî", "reps": "Complete entire circuit twice", "category": "Core"},
        ]

        # -----------------------------
        # Session init
        # -----------------------------
        if 'initialized' not in st.session_state:
            st.session_state.initialized = True
            ensure_dirs()
            load_user_data()

        defaults = {
            'completed_exercises': [], 'selected_level': 1, 'progress_entries': [],
            'selected_workout': None, 'selected_workout_day': None, 'current_page': 'Home'
        }
        for k, v in defaults.items():
            if k not in st.session_state: st.session_state[k] = v

        # -----------------------------
        # Home button
        # -----------------------------
        def render_home_button():
            if st.button("üè† Home", key="home_btn", help="Return to main page"):
                st.session_state.current_page = 'Home'
                st.session_state.selected_workout = None
                st.session_state.selected_workout_day = None
                save_user_data()
                st.rerun()

        # -----------------------------
        # Hero (always visible at top)
        # -----------------------------
        def render_hero():
            ensure_dirs()
            st.markdown("""
            <div class="hero-section">
                <h1 class="main-header">HOURGLASS FITNESS TRANSFORMATION</h1>
                <p class="sub-header">12-Week plan for Booty, Core, Back & Shoulders ‚Äî by Joane Aristilde</p>
            </div>
            """, unsafe_allow_html=True)
            mode = st.radio("Choose your display:", ["Cover Photo", "Intro Video"], horizontal=True)
            c1, c2 = st.columns([3, 2])
            if mode == "Cover Photo":
                with c1:
                    cover = _latest(MAIN_MEDIA_DIR, "cover_")
                    st.image(cover, use_container_width=True,
                             caption="Your Transformation Journey") if cover else st.info(
                        "Upload a cover photo on the right.")
                with c2:
                    up = st.file_uploader("Upload your transformation photo", type=["png", "jpg", "jpeg"],
                                          key="cover_up")
                    if up:
                        dst = os.path.join(MAIN_MEDIA_DIR, _timestamp_name("cover", up.name))
                        with open(dst, "wb") as f: f.write(up.getbuffer())
                        st.success("Cover photo saved!");
                        st.image(dst, use_container_width=True)
                    existing = _latest(MAIN_MEDIA_DIR, "cover_")
                    if existing and st.button("Delete current cover photo"):
                        os.remove(existing);
                        st.success("Photo deleted!");
                        st.rerun()
            else:
                with c1:
                    vid = _latest(MAIN_MEDIA_DIR, "intro_")
                    st.video(vid);
                    st.caption("Your intro video") if vid else st.info("Upload an intro video on the right.")
                with c2:
                    upv = st.file_uploader("Upload your intro video", type=["mp4", "mov", "avi", "webm"],
                                           key="intro_up")
                    if upv:
                        dst = os.path.join(MAIN_MEDIA_DIR, _timestamp_name("intro", upv.name))
                        with open(dst, "wb") as f: f.write(upv.getbuffer())
                        st.success("Intro video saved!");
                        st.video(dst)
                    existing = _latest(MAIN_MEDIA_DIR, "intro_")
                    if existing and st.button("Delete intro video"):
                        os.remove(existing);
                        st.success("Video deleted!");
                        st.rerun()

        # -----------------------------
        # New content pages
        # -----------------------------
        def render_home_page():
            st.markdown("""
            <div class="info-section">
                <h2>Welcome to Your Hourglass Fitness Transformation</h2>
                <p>Transform your body with this comprehensive 12-week program designed specifically for building your booty, strengthening your core, and sculpting your back and shoulders.</p>

                <h3>Getting Started:</h3>
                <ol>
                    <li><strong>Read the Workout Overview:</strong> Understand the program structure</li>
                    <li><strong>Learn Progressive Overload:</strong> Master the key principle for muscle building</li>
                    <li><strong>Choose Your Level:</strong> Start with Level 1 if you're new to this program</li>
                    <li><strong>Begin Your Program:</strong> Follow your daily workouts</li>
                    <li><strong>Track Your Progress:</strong> Use the weight tracker to monitor changes</li>
                </ol>

                <div style="background: rgba(255,20,147,0.1); padding: 16px; border-radius: 12px; margin: 20px 0;">
                    <h4 style="color: #FF1493; margin-top: 0;">Ready to Start?</h4>
                    <p>Navigate through the tabs below to explore different sections. Remember: consistency and proper form are key to your success!</p>
                </div>
            </div>
            """, unsafe_allow_html=True)

        def render_progressive_overload():
            st.markdown("""
            <div class="info-section">
                <h2>Progressive Overload</h2>
                <p>All exercises with weights should be performed according to the principle of "Progressive Overload." This means that you consistently increase your performance. If 12 repetitions feel easy, you raise the weight so that you can only manage 8 repetitions. Over time, you then aim to increase the number of repetitions back to 12. This is how you build muscle.</p>

                <p>The number of reps listed below may therefore vary as you apply progressive overload.</p>

                <h3>How It Works:</h3>
                <ul>
                    <li><strong>Start with proper form:</strong> Master the movement pattern before adding weight</li>
                    <li><strong>Increase difficulty gradually:</strong> When 12 reps feel easy, increase weight so you can only do 8 reps with good form</li>
                    <li><strong>Build back up:</strong> Work to increase reps back to 12 with the new weight</li>
                    <li><strong>Track your progress:</strong> Keep records of weights, sets, and reps</li>
                </ul>

                <h3>Safety Guidelines:</h3>
                <ul>
                    <li>Never sacrifice form for heavier weight</li>
                    <li>Increase weight by small increments (2.5-5 lbs typically)</li>
                    <li>Allow adequate rest between sets and training days</li>
                    <li>Listen to your body and adjust as needed</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)

        def render_workout_overview():
            st.markdown("""
            <div class="info-section">
                <h2>Workout Overview</h2>
                <p>The training plan is structured as follows:</p>

                <p>The categories "Booty", "Legs & Booty" and "Light Shoulders & Back" are divided into Level 1 and Level 2. It's advisable to start with Level 1. If you're slightly more advanced and ready for a challenge, you can begin with Level 2. Beginners should stick with Level 1 until they feel confident with the exercises. Don't forget that the entire split changes when you progress to Level 2.</p>

                <p>The "Abs/Core Only" category is specifically designed for beginners and can be done at home. If you're motivated on a rest day, you can incorporate "Abs/Core Only" into your weekly plan (This also applies to the advanced). However, be cautious not to overexert yourself. The body requires sufficient rest and time for recovery and muscle building.</p>

                <p>The plan for advanced (Level 2) is also my current personal workout plan! However, my training plan changes every 12 weeks. The order of exercises is strategically arranged for an optimal training experience and should be adhered to as closely as possible.</p>
            </div>
            """, unsafe_allow_html=True)